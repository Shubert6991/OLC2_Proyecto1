/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,14],$V2=[1,12],$V3=[1,21],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[5,13,14,20,31,70,73,79,80,81,83],$Vb=[5,13,14,20,31,34,49,50,58,63,65,66,67,70,73,77,78,79,80,81,83],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,39],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,64],$Vk=[1,52],$Vl=[1,53],$Vm=[1,55],$Vn=[1,56],$Vo=[1,60],$Vp=[1,59],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,93],$Vu=[1,89],$Vv=[1,90],$Vw=[1,91],$Vx=[1,92],$Vy=[1,94],$Vz=[19,37,42],$VA=[1,104],$VB=[1,105],$VC=[15,19,37,42,46,47,48,64],$VD=[1,119],$VE=[1,120],$VF=[1,113],$VG=[1,114],$VH=[1,115],$VI=[1,116],$VJ=[1,117],$VK=[1,118],$VL=[15,19,37,39,40,42,43,44,46,47,48,53,54,55,56,57,58,59,60,61,62,64],$VM=[5,13,14,20,31,34,70,72,73,77,78,79,80,81,83],$VN=[13,14,20,31,34,70,73,77,78,79,80,81,83],$VO=[15,17,19],$VP=[2,24],$VQ=[2,25],$VR=[2,26],$VS=[2,27],$VT=[2,28],$VU=[37,42],$VV=[15,19,37,39,40,42,46,47,48,53,54,55,56,57,58,64],$VW=[15,19,37,39,40,42,43,44,46,47,48,53,54,55,56,57,58,59,60,62,64],$VX=[5,13,14,20,31,34,70,73,77,78,79,80,81,83],$VY=[14,34],$VZ=[14,23,24,25,26,34,38],$V_=[34,77,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"I":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"IF":8,"SWITCH":9,"WHILE":10,"DOWHILE":11,"FOR":12,"tk_let":13,"tk_id":14,"tk_dospuntos":15,"TIPOV2":16,"tk_igual":17,"VALOR":18,"tk_puntoycoma":19,"tk_const":20,"TYPES":21,"TIPOV":22,"tk_string":23,"tk_number":24,"tk_boolean":25,"tk_void":26,"ARRAY":27,"ASIGTYPE":28,"VARRAY":29,"T":30,"tk_type":31,"tk_llavea":32,"LTYPE":33,"tk_llavec":34,"LASIGTYPE":35,"tk_llaveca":36,"tk_llavecc":37,"tk_array":38,"tk_menor":39,"tk_mayor":40,"LVALARRAY":41,"tk_coma":42,"tk_inc":43,"tk_dec":44,"L":45,"tk_ternario":46,"tk_and":47,"tk_or":48,"tk_not":49,"tk_t_boolean":50,"R":51,"A":52,"tk_mayorigual":53,"tk_menorigual":54,"tk_igualdad":55,"tk_diferente":56,"tk_suma":57,"tk_resta":58,"tk_mult":59,"tk_div":60,"tk_exp":61,"tk_mod":62,"tk_pabierto":63,"tk_pcerrado":64,"tk_t_string":65,"tk_t_entero":66,"tk_t_decimal":67,"BSENTENCIAS":68,"SENTENCIAS":69,"tk_if":70,"ELSE":71,"tk_else":72,"tk_switch":73,"BSWITCH":74,"CASE":75,"DEFAULT":76,"tk_case":77,"tk_default":78,"tk_while":79,"tk_do":80,"tk_for":81,"tk_in":82,"tk":83,"for":84,"tk_of":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"tk_let",14:"tk_id",15:"tk_dospuntos",17:"tk_igual",19:"tk_puntoycoma",20:"tk_const",23:"tk_string",24:"tk_number",25:"tk_boolean",26:"tk_void",31:"tk_type",32:"tk_llavea",34:"tk_llavec",36:"tk_llaveca",37:"tk_llavecc",38:"tk_array",39:"tk_menor",40:"tk_mayor",42:"tk_coma",43:"tk_inc",44:"tk_dec",46:"tk_ternario",47:"tk_and",48:"tk_or",49:"tk_not",50:"tk_t_boolean",53:"tk_mayorigual",54:"tk_menorigual",55:"tk_igualdad",56:"tk_diferente",57:"tk_suma",58:"tk_resta",59:"tk_mult",60:"tk_div",61:"tk_exp",62:"tk_mod",63:"tk_pabierto",64:"tk_pcerrado",65:"tk_t_string",66:"tk_t_entero",67:"tk_t_decimal",70:"tk_if",72:"tk_else",73:"tk_switch",77:"tk_case",78:"tk_default",79:"tk_while",80:"tk_do",81:"tk_for",82:"tk_in",83:"tk",84:"for",85:"tk_of"},
productions_: [0,[3,2],[3,1],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[6,7],[6,7],[6,5],[6,5],[6,5],[6,3],[6,1],[22,1],[22,1],[22,1],[22,1],[22,1],[16,1],[16,1],[18,1],[18,1],[18,1],[21,6],[33,5],[33,4],[28,3],[35,5],[35,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[29,3],[41,3],[41,1],[7,4],[7,3],[7,3],[30,5],[30,1],[45,3],[45,3],[45,2],[45,1],[45,1],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,1],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,2],[52,2],[52,3],[52,2],[52,1],[52,1],[52,1],[52,1],[68,3],[68,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[8,6],[8,5],[71,2],[71,2],[9,5],[74,4],[74,3],[74,2],[75,5],[75,5],[75,4],[75,4],[75,4],[75,3],[76,3],[76,3],[76,2],[10,5],[11,6],[12,8],[12,8],[12,7],[12,8],[12,8],[12,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,14:$V1,20:$V2,21:13,31:$V3,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9},{1:[3]},{5:[1,22],6:23,7:24,8:25,9:26,10:27,11:28,12:29,13:$V0,14:$V1,20:$V2,21:13,31:$V3,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9},{1:[2,2]},o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),{14:[1,30]},{14:[1,31]},o($Vb,[2,23]),{17:$Vc,43:$Vd,44:$Ve},{63:[1,35]},{63:[1,36]},{63:[1,37]},{32:$Vf,68:38},{63:[1,40]},{84:[1,41]},{14:[1,42]},{1:[2,1]},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{15:$Vg,17:$Vh,19:$Vi},{15:[1,46],17:[1,47]},{14:$Vj,18:48,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{19:[1,65]},{19:[1,66]},{14:$Vj,45:67,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,45:68,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,45:69,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{79:[1,70]},{6:73,7:74,8:75,9:76,10:77,11:78,12:79,13:$V0,14:$V1,20:$V2,21:13,31:$V3,34:[1,72],69:71,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9},{6:80,7:81,13:[1,83],14:[1,82],20:$V2,21:13,31:$V3},{63:[1,84]},{32:[1,85]},{14:$Vt,16:86,22:87,23:$Vu,24:$Vv,25:$Vw,26:$Vx,27:88,38:$Vy},{14:$Vj,18:95,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($Vb,[2,22]),{14:$Vt,16:96,22:87,23:$Vu,24:$Vv,25:$Vw,26:$Vx,27:88,38:$Vy},{14:$Vj,18:97,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{19:[1,98]},o($Vz,[2,31]),o($Vz,[2,32]),o($Vz,[2,33]),{14:[1,100],35:99},{14:$Vj,18:102,28:49,29:50,30:51,32:$Vk,36:$Vl,41:101,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($Vz,[2,53],{46:[1,103],47:$VA,48:$VB}),{14:$Vj,45:106,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VC,[2,57]),o($VC,[2,58]),o($VC,[2,65],{39:[1,108],40:[1,107],43:$VD,44:$VE,53:[1,109],54:[1,110],55:[1,111],56:[1,112],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{14:$Vj,52:121,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:122,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o($Vb,[2,50]),o($Vb,[2,51]),{47:$VA,48:$VB,64:[1,123]},{47:$VA,48:$VB,64:[1,124]},{47:$VA,48:$VB,64:[1,125]},{63:[1,126]},{6:128,7:129,8:130,9:131,10:132,11:133,12:134,13:$V0,14:$V1,20:$V2,21:13,31:$V3,34:[1,127],70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9},o($VM,[2,81]),o($VN,[2,89]),o($VN,[2,90]),o($VN,[2,91]),o($VN,[2,92]),o($VN,[2,93]),o($VN,[2,94]),o($VN,[2,95]),{14:$Vj,45:135,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,45:136,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{17:$Vc,43:$Vd,44:$Ve,82:[1,137]},{14:[1,138]},{14:[1,139]},{14:$Vt,16:141,22:87,23:$Vu,24:$Vv,25:$Vw,26:$Vx,27:88,33:140,38:$Vy},{17:[1,142],19:[1,143]},o($VO,[2,29]),o($VO,[2,30]),o($VO,$VP,{36:[1,144]}),o($VO,$VQ,{36:[1,145]}),o($VO,$VR,{36:[1,146]}),o($VO,$VS,{37:[1,147]}),o($VO,$VT,{37:[1,148]}),{39:[1,149]},{19:[1,150]},{17:[1,151]},{19:[1,152]},o($Vb,[2,49]),{14:[1,154],34:[1,153]},{15:[1,155]},{37:[1,156],42:[1,157]},o($VU,[2,48]),{14:$Vj,45:158,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,45:159,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,45:160,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VC,[2,56]),{14:$Vj,52:161,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:162,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:163,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:164,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:165,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:166,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:167,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:168,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:169,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:170,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:171,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,52:172,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VL,[2,72]),o($VL,[2,73]),{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,64:[1,173]},o($VV,[2,75],{43:$VD,44:$VE,59:$VH,60:$VI,61:$VJ,62:$VK}),{32:$Vf,68:174},{32:[1,176],74:175},{32:$Vf,68:177},{14:$Vj,45:178,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VM,[2,80]),o($VN,[2,82]),o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88]),{19:[1,179],47:$VA,48:$VB},{19:[1,180],47:$VA,48:$VB},{14:[1,181]},{15:$Vg,17:$Vh,19:$Vi,82:[1,182],85:[1,183]},{85:[1,184]},{14:$Vt,16:186,22:87,23:$Vu,24:$Vv,25:$Vw,26:$Vx,27:88,34:[1,185],38:$Vy},{15:[1,187]},{14:$Vj,18:188,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($Vb,[2,21]),{37:[1,189]},{37:[1,190]},{37:[1,191]},{37:[1,192]},{37:[1,193]},{14:[1,199],22:194,23:[1,195],24:[1,196],25:[1,197],26:[1,198]},o($Vb,[2,19]),{14:$Vj,18:200,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($Vb,[2,20]),o($Vz,[2,37]),{15:[1,201]},{14:$Vj,18:202,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($Vz,[2,46]),{14:$Vj,18:203,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{15:[1,204],47:$VA,48:$VB},o($VC,[2,54]),o([15,19,37,42,46,48,64],[2,55],{47:$VA}),o($VC,[2,59],{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VC,[2,60],{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VC,[2,61],{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VC,[2,62],{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VC,[2,63],{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VC,[2,64],{43:$VD,44:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VV,[2,66],{43:$VD,44:$VE,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VV,[2,67],{43:$VD,44:$VE,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VW,[2,68],{61:$VJ}),o($VW,[2,69],{61:$VJ}),o($VL,[2,70]),o($VW,[2,71],{61:$VJ}),o($VL,[2,74]),o($VX,[2,97],{71:205,72:[1,206]}),o($VX,[2,100]),{34:[1,208],75:207,77:[1,209]},o($VX,[2,113]),{47:$VA,48:$VB,64:[1,210]},{14:$Vj,45:211,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{14:$Vj,45:212,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{64:[1,213]},{14:[1,214]},{14:[1,215]},{14:[1,216]},{19:[1,217]},{15:[1,218]},{14:[1,219]},{19:[1,220]},o($VO,[2,40]),o($VO,[2,41]),o($VO,[2,42]),o($VO,[2,43]),o($VO,[2,44]),{40:[1,221]},{40:$VP},{40:$VQ},{40:$VR},{40:$VS},{40:$VT},{19:[1,222]},{14:$Vj,18:223,28:49,29:50,30:51,32:$Vk,36:$Vl,45:54,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{19:[1,224]},o($VU,[2,47]),{14:$Vj,45:225,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VX,[2,96]),{8:227,32:$Vf,68:226,70:$V4},{34:[1,229],76:228,77:[1,230],78:[1,231]},o($VX,[2,103]),{14:$Vj,45:232,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},o($VX,[2,114]),{47:$VA,48:$VB,64:[1,233]},{47:$VA,48:$VB,64:[1,234]},{32:$Vf,68:235},{64:[1,236]},{64:[1,237]},{64:[1,238]},o($Vb,[2,34]),{14:[1,239]},{19:[1,240]},o($Vb,[2,17]),o($VO,[2,45]),o($Vb,[2,18]),{19:[1,241]},o($VY,[2,39]),o($Vz,[2,52],{47:$VA,48:$VB}),o($VX,[2,98]),o($VX,[2,99]),{34:[1,242]},o($VX,[2,102]),{14:$Vj,45:243,49:$Vm,50:$Vn,51:57,52:58,58:$Vo,63:$Vp,65:$Vq,66:$Vr,67:$Vs},{15:[1,244]},{15:[1,245],47:$VA,48:$VB},{32:$Vf,68:246},{32:$Vf,68:247},o($VX,[2,117]),{32:$Vf,68:248},{32:$Vf,68:249},{32:$Vf,68:250},{19:[1,251]},o($VZ,[2,36]),o($VY,[2,38]),o($VX,[2,101]),{15:[1,252],47:$VA,48:$VB},{6:73,7:74,8:75,9:76,10:77,11:78,12:79,13:$V0,14:$V1,20:$V2,21:13,31:$V3,32:$Vf,34:[2,112],68:254,69:253,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9},o($V_,[2,109],{21:13,6:73,7:74,8:75,9:76,10:77,11:78,12:79,69:255,68:256,13:$V0,14:$V1,20:$V2,31:$V3,32:$Vf,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9}),o($VX,[2,115]),o($VX,[2,116]),o($VX,[2,118]),o($VX,[2,120]),o($VX,[2,119]),o($VZ,[2,35]),o($V_,[2,106],{21:13,6:73,7:74,8:75,9:76,10:77,11:78,12:79,69:257,68:258,13:$V0,14:$V1,20:$V2,31:$V3,32:$Vf,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9}),{6:128,7:129,8:130,9:131,10:132,11:133,12:134,13:$V0,14:$V1,20:$V2,21:13,31:$V3,34:[2,110],70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9},{34:[2,111]},o($V_,[2,107],{21:13,6:128,7:129,8:130,9:131,10:132,11:133,12:134,13:$V0,14:$V1,20:$V2,31:$V3,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9}),o($V_,[2,108]),o($V_,[2,104],{21:13,6:128,7:129,8:130,9:131,10:132,11:133,12:134,13:$V0,14:$V1,20:$V2,31:$V3,70:$V4,73:$V5,79:$V6,80:$V7,81:$V8,83:$V9}),o($V_,[2,105])],
defaultActions: {3:[2,2],22:[2,1],195:[2,24],196:[2,25],197:[2,26],198:[2,27],199:[2,28],254:[2,111]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var valcadena = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comentarios"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: this.popState(); return 5; 
break;
case 4: this.begin("comentariomulti"); 
break;
case 5: this.popState(); 
break;
case 6:  
break;
case 7:  
break;
case 8: this.begin("tstring"); 
break;
case 9: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 65;
                                
break;
case 10: valcadena +='\n'; 
break;
case 11: valcadena +='\t'; 
break;
case 12: valcadena +='\\'; 
break;
case 13: valcadena +='\r'; 
break;
case 14: valcadena +='\"'; 
break;
case 15: valcadena += yy_.yytext; 
break;
case 16: this.begin("tstring2"); 
break;
case 17: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 65;
                                
break;
case 18: valcadena +='\n'; 
break;
case 19: valcadena +='\t'; 
break;
case 20: valcadena +='\\'; 
break;
case 21: valcadena +='\r'; 
break;
case 22: valcadena +='\"'; 
break;
case 23: valcadena += yy_.yytext; 
break;
case 24: this.begin("ttstring"); 
break;
case 25: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 65;
                                
break;
case 26: valcadena +='\n'; 
break;
case 27: valcadena +='\t'; 
break;
case 28: valcadena +='\\'; 
break;
case 29: valcadena +='\r'; 
break;
case 30: valcadena +='\"'; 
break;
case 31: valcadena += yy_.yytext; 
break;
case 32: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_comilladoble'; 
break;
case 33: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_barrainvertida'; 
break;
case 34: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_salto'; 
break;
case 35: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_retorno'; 
break;
case 36: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_tab'; 
break;
case 37: console.log("tipo de dato:"+yy_.yytext);  return 23; 
break;
case 38: console.log("tipo de dato:"+yy_.yytext);  return 24; 
break;
case 39: console.log("tipo de dato:"+yy_.yytext);  return 25; 
break;
case 40: console.log("tipo de dato:"+yy_.yytext);  return 26; 
break;
case 41: console.log("tipo de dato:"+yy_.yytext);  return 31; 
break;
case 42: console.log("inicio array:"+yy_.yytext);  return 38; 
break;
case 43: console.log("accion array:"+yy_.yytext);  return 'tk_push'; 
break;
case 44: console.log("accion array:"+yy_.yytext);  return 'tk_pop'; 
break;
case 45: console.log("accion array:"+yy_.yytext);  return 'tk_lenght'; 
break;
case 46: console.log("declaracion:"+yy_.yytext);  return 13; 
break;
case 47: console.log("declaracion:"+yy_.yytext);  return 20; 
break;
case 48: console.log("boolean:"+yy_.yytext);  return 50; 
break;
case 49: console.log("boolean:"+yy_.yytext);  return 50; 
break;
case 50: console.log("sentencias:"+yy_.yytext);  return 70; 
break;
case 51: console.log("sentencias:"+yy_.yytext);  return 72; 
break;
case 52: console.log("sentencias:"+yy_.yytext);  return 73; 
break;
case 53: console.log("sentencias:"+yy_.yytext);  return 77; 
break;
case 54: console.log("sentencias:"+yy_.yytext);  return 78; 
break;
case 55: console.log("sentencias:"+yy_.yytext);  return 79; 
break;
case 56: console.log("sentencias:"+yy_.yytext);  return 80; 
break;
case 57: console.log("sentencias:"+yy_.yytext);  return 81; 
break;
case 58: console.log("sentencias:"+yy_.yytext);  return 82; 
break;
case 59: console.log("sentencias:"+yy_.yytext);  return 85; 
break;
case 60: console.log("arimetica:"+yy_.yytext); return 61; 
break;
case 61: console.log("arimetica:"+yy_.yytext); return 43; 
break;
case 62: console.log("arimetica:"+yy_.yytext); return 44; 
break;
case 63: console.log("arimetica:"+yy_.yytext); return 57; 
break;
case 64: console.log("arimetica:"+yy_.yytext); return 58; 
break;
case 65: console.log("arimetica:"+yy_.yytext); return 59; 
break;
case 66: console.log("arimetica:"+yy_.yytext); return 60; 
break;
case 67: console.log("arimetica:"+yy_.yytext); return 62; 
break;
case 68: console.log("relacional:"+yy_.yytext); return 53; 
break;
case 69: console.log("relacional:"+yy_.yytext); return 54; 
break;
case 70: console.log("relacional:"+yy_.yytext); return 55; 
break;
case 71: console.log("relacional:"+yy_.yytext); return 56; 
break;
case 72: console.log("relacional:"+yy_.yytext); return 40; 
break;
case 73: console.log("relacional:"+yy_.yytext); return 39; 
break;
case 74: console.log("Logica:"+yy_.yytext); return 47; 
break;
case 75: console.log("Logica:"+yy_.yytext); return 48; 
break;
case 76: console.log("Logica:"+yy_.yytext); return 49; 
break;
case 77: console.log("ternario:"+yy_.yytext); return 46; 
break;
case 78: console.log("simbolo:"+yy_.yytext); return 36; 
break;
case 79: console.log("simbolo:"+yy_.yytext); return 37; 
break;
case 80: console.log("simbolo:"+yy_.yytext); return 15; 
break;
case 81: console.log("simbolo:"+yy_.yytext); return 17; 
break;
case 82: console.log("simbolo:"+yy_.yytext); return 19; 
break;
case 83: console.log("simbolo:"+yy_.yytext); return 32; 
break;
case 84: console.log("simbolo:"+yy_.yytext); return 34; 
break;
case 85: console.log("simbolo:"+yy_.yytext); return 42; 
break;
case 86: console.log("simbolo:"+yy_.yytext); return 63; 
break;
case 87: console.log("simbolo:"+yy_.yytext); return 64; 
break;
case 88: console.log("numero decimal:"+yy_.yytext);  return 67; 
break;
case 89: console.log("numero entero:"+yy_.yytext);  return 66; 
break;
case 90:  console.log("id:"+yy_.yytext); return 14; 
break;
case 91: /*se ignoran*/ 
break;
case 92:  return 5;  
break;
case 93:  console.log("error:"+yy_.yytext); 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:["])/,/^(?:["])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:['])/,/^(?:['])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:[`])/,/^(?:[`])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:\\")/,/^(?:\\\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Lenght\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[[a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*|["_"]+[0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"ttstring":{"rules":[25,26,27,28,29,30,31],"inclusive":false},"tstring2":{"rules":[17,18,19,20,21,22,23],"inclusive":false},"tstring":{"rules":[9,10,11,12,13,14,15],"inclusive":false},"comentariomulti":{"rules":[5,6,7],"inclusive":false},"comentarios":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,16,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}