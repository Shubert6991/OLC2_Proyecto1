/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,17],$V2=[1,14],$V3=[1,27],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,28],$Vb=[1,25],$Vc=[1,26],$Vd=[5,14,15,21,37,75,78,84,85,86,88,94,97,98],$Ve=[5,14,15,21,37,40,49,54,55,63,68,70,71,75,78,82,83,84,85,86,88,91,92,93,94,97,98],$Vf=[1,42],$Vg=[1,40],$Vh=[1,41],$Vi=[1,43],$Vj=[1,44],$Vk=[1,52],$Vl=[1,64],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,78],$Vq=[1,77],$Vr=[1,79],$Vs=[1,80],$Vt=[1,89],$Vu=[1,82],$Vv=[1,83],$Vw=[1,87],$Vx=[1,86],$Vy=[1,88],$Vz=[1,90],$VA=[1,94],$VB=[1,98],$VC=[1,113],$VD=[1,114],$VE=[1,115],$VF=[1,116],$VG=[1,136],$VH=[1,135],$VI=[1,131],$VJ=[1,132],$VK=[1,133],$VL=[1,134],$VM=[1,137],$VN=[2,20,43,48,69],$VO=[2,49],$VP=[2,100],$VQ=[1,143],$VR=[1,144],$VS=[1,145],$VT=[2,53],$VU=[1,151],$VV=[1,152],$VW=[2,16,20,43,48,51,52,53,69],$VX=[1,160],$VY=[1,161],$VZ=[1,162],$V_=[1,163],$V$=[1,164],$V01=[1,165],$V11=[2,16,20,43,45,46,48,51,52,53,58,59,60,61,62,63,64,65,66,67,69],$V21=[5,14,15,21,37,40,75,78,82,83,84,85,86,88,91,92,93,94,97,98],$V31=[1,173],$V41=[5,14,15,21,37,40,49,54,55,63,68,70,71,75,77,78,82,83,84,85,86,88,91,92,93,94,97,98],$V51=[14,15,21,37,40,75,78,82,83,84,85,86,88,91,92,93,94,97,98],$V61=[2,16,18,20,38,48,69],$V71=[2,38],$V81=[2,39],$V91=[2,40],$Va1=[2,41],$Vb1=[2,42],$Vc1=[43,48],$Vd1=[2,16,20,43,45,46,48,51,52,53,58,59,60,61,62,63,69],$Ve1=[2,20],$Vf1=[48,69],$Vg1=[2,16,20,43,45,46,48,51,52,53,58,59,60,61,62,63,64,65,67,69],$Vh1=[40,82,83],$Vi1=[15,40],$Vj1=[2,15,27,28,29,30,40,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"I":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"IF":8,"SWITCH":9,"WHILE":10,"DOWHILE":11,"FOR":12,"FESP":13,"tk_let":14,"tk_id":15,"tk_dospuntos":16,"TIPOV2":17,"tk_igual":18,"VALOR":19,"tk_puntoycoma":20,"tk_const":21,"TYPES":22,"DECFUNCION":23,"tk_inc":24,"tk_dec":25,"TIPOV":26,"tk_string":27,"tk_number":28,"tk_boolean":29,"tk_void":30,"ARRAY":31,"ASIGTYPE":32,"VARRAY":33,"T":34,"VALARRAY":35,"VALFUNCION":36,"tk_type":37,"tk_llavea":38,"LTYPE":39,"tk_llavec":40,"LASIGTYPE":41,"tk_llaveca":42,"tk_llavecc":43,"tk_array":44,"tk_menor":45,"tk_mayor":46,"LVALARRAY":47,"tk_coma":48,"tk_t_entero":49,"L":50,"tk_ternario":51,"tk_and":52,"tk_or":53,"tk_not":54,"tk_t_boolean":55,"R":56,"A":57,"tk_mayorigual":58,"tk_menorigual":59,"tk_igualdad":60,"tk_diferente":61,"tk_suma":62,"tk_resta":63,"tk_mult":64,"tk_div":65,"tk_exp":66,"tk_mod":67,"tk_pabierto":68,"tk_pcerrado":69,"tk_t_string":70,"tk_t_decimal":71,"BSENTENCIAS":72,"SENTENCIAS":73,"ST":74,"tk_if":75,"ELSE":76,"tk_else":77,"tk_switch":78,"BSWITCH":79,"CASE":80,"DEFAULT":81,"tk_case":82,"tk_default":83,"tk_while":84,"tk_do":85,"tk_for":86,"tk_in":87,"tk":88,"for":89,"tk_of":90,"tk_break":91,"tk_continue":92,"tk_return":93,"tk_fn":94,"PARFUNC":95,"LPAR":96,"tk_console":97,"tk_graficar":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"tk_let",15:"tk_id",16:"tk_dospuntos",18:"tk_igual",20:"tk_puntoycoma",21:"tk_const",24:"tk_inc",25:"tk_dec",27:"tk_string",28:"tk_number",29:"tk_boolean",30:"tk_void",37:"tk_type",38:"tk_llavea",40:"tk_llavec",42:"tk_llaveca",43:"tk_llavecc",44:"tk_array",45:"tk_menor",46:"tk_mayor",48:"tk_coma",49:"tk_t_entero",51:"tk_ternario",52:"tk_and",53:"tk_or",54:"tk_not",55:"tk_t_boolean",58:"tk_mayorigual",59:"tk_menorigual",60:"tk_igualdad",61:"tk_diferente",62:"tk_suma",63:"tk_resta",64:"tk_mult",65:"tk_div",66:"tk_exp",67:"tk_mod",68:"tk_pabierto",69:"tk_pcerrado",70:"tk_t_string",71:"tk_t_decimal",75:"tk_if",77:"tk_else",78:"tk_switch",82:"tk_case",83:"tk_default",84:"tk_while",85:"tk_do",86:"tk_for",87:"tk_in",88:"tk",89:"for",90:"tk_of",91:"tk_break",92:"tk_continue",93:"tk_return",94:"tk_fn",97:"tk_console",98:"tk_graficar"},
productions_: [0,[3,2],[3,1],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[6,7],[6,7],[6,7],[6,7],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,3],[6,3],[6,1],[6,1],[6,3],[6,3],[6,3],[6,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[17,1],[17,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[19,1],[22,6],[22,6],[39,5],[39,4],[32,3],[41,5],[41,4],[31,3],[31,3],[31,3],[31,3],[31,3],[31,4],[33,3],[47,3],[47,1],[35,4],[7,4],[7,4],[7,4],[7,4],[34,5],[34,1],[50,3],[50,3],[50,2],[50,1],[50,1],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[57,1],[57,1],[57,1],[57,1],[72,3],[72,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[8,6],[8,5],[8,4],[8,3],[76,2],[76,2],[9,5],[9,3],[79,4],[79,3],[79,2],[79,3],[80,5],[80,5],[80,4],[80,4],[80,4],[80,3],[81,3],[81,3],[81,2],[10,5],[10,3],[11,6],[11,4],[12,8],[12,8],[12,7],[12,8],[12,8],[12,8],[12,3],[74,2],[74,2],[74,2],[74,2],[74,2],[74,2],[74,3],[74,3],[74,2],[23,7],[23,8],[23,3],[36,3],[36,4],[95,5],[95,3],[96,3],[96,1],[13,5],[13,5],[13,4],[13,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 19:
console.error("Error sintactico: "+yytext+" Desconocido Inicio")
break;
case 21: case 23: case 25: case 27: case 29: case 31: case 35: case 37:
console.error("Error Sintactico: "+yytext+ " falto punto y coma");
break;
case 43:
console.error("Error sintactico: "+$$[$0]+" error tipo")
break;
case 53:
console.error("Error sintactico: "+$$[$0]+" error valor")
break;
case 55:
console.error("Error sintantico "+ $$[$0]+" error types")
break;
case 72: case 74:
console.log("Error Sintactico "+$$[$0]+"Error falto punto y coma")
break;
case 121:
console.error("Error sintactico: "+yytext+" Desconocido Sentencias")
break;
case 124:
console.error("Error Sintactico: "+$$[$0-2]+" Error parametros en if")
break;
case 125:
console.error("Error Sintactico: "+$$[$0-1]+" Error parametros en if")
break;
case 129:
 console.error("Error sintactico: "+$$[$0-1]+" Error parametros en switch") 
break;
case 133:
 console.error("Error Sintactico: "+$$[$0-1]+" Error Cases en switch")
break;
case 144:
console.error("Error Sintactico: "+$$[$0-1]+" Error parametros while")
break;
case 146:
console.error("Error Sintactico: "+$$[$0-2]+" Error parametros doWhile")
break;
case 153:
console.error("Error Sintactico: "+$$[$0-1]+" Error parametros for")
break;
case 155: case 157: case 159: case 161: case 173: case 175:
console.error("Error Sintactico: "+$$[$0]+" falta punto y coma")
break;
case 165:
console.error("Error Sintactico: "+$$[$0-1]+" Error parametros funciones")
break;
}
},
table: [{2:[1,12],3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:$V0,15:$V1,21:$V2,22:15,23:16,35:18,37:$V3,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,94:$Va,97:$Vb,98:$Vc},{1:[3]},{5:[1,29],6:30,7:31,8:32,9:33,10:34,11:35,12:36,13:37,14:$V0,15:$V1,21:$V2,22:15,23:16,35:18,37:$V3,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,94:$Va,97:$Vb,98:$Vc},{1:[2,2]},o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{15:[1,38]},{15:[1,39]},o($Ve,[2,32]),o($Ve,[2,33]),{18:$Vf,24:$Vg,25:$Vh,42:$Vi},{18:$Vj},{2:[1,46],68:[1,45]},{2:[1,48],68:[1,47]},{2:[1,50],68:[1,49]},{38:$Vk,72:51},{2:[1,54],68:[1,53]},{89:[1,55]},{68:[1,56]},{68:[1,57]},{15:[1,58]},{2:[1,60],15:[1,59]},{1:[2,1]},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),{2:$Vl,16:$Vm,18:$Vn,20:$Vo},{16:[1,65],18:[1,66]},{2:[1,68],20:[1,67]},{2:[1,70],20:[1,69]},{2:$Vp,15:$Vq,19:71,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{49:[1,91]},{2:$Vp,15:$Vq,19:92,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,50:93,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{38:$Vk,72:95},{15:$VA,49:$Vt,50:96,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{38:$VB,79:97},{15:$VA,49:$Vt,50:99,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{38:$Vk,72:100},{84:[1,101]},{2:$VC,6:104,7:105,8:106,9:107,10:108,11:109,12:110,13:112,14:$V0,15:$V1,21:$V2,22:15,23:16,35:18,37:$V3,40:[1,103],73:102,74:111,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc},{6:117,7:118,14:[1,120],15:[1,119],21:$V2,22:15,23:16,35:18,37:$V3,94:$Va},{38:$Vk,72:121},{68:[1,122]},{2:$Vp,15:$Vq,19:123,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{69:[1,124]},{38:[1,125]},{68:[1,126]},{38:$Vk,72:127},{2:$VG,15:$VH,17:128,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,44:$VM},{2:$Vp,15:$Vq,19:138,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($Ve,[2,30]),o($Ve,[2,31]),{2:$VG,15:$VH,17:139,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,44:$VM},{2:$Vp,15:$Vq,19:140,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($Ve,[2,34]),o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),{2:[1,142],20:[1,141]},o($VN,[2,46]),o($VN,[2,47]),o($VN,[2,48]),o($VN,$VO),o($VN,[2,50]),o([2,20,43,45,46,48,51,52,53,58,59,60,61,62,63,64,65,66,67,69],$VP,{24:$VQ,25:$VR,42:$Vi,68:$VS}),o($VN,$VT),{15:[1,147],41:146},{2:$Vp,15:$Vq,19:149,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,47:148,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($VN,[2,76],{51:[1,150],52:$VU,53:$VV}),{15:$VA,49:$Vt,50:153,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($VW,[2,80]),o($VW,[2,81]),o($VW,[2,88],{45:[1,155],46:[1,154],58:[1,156],59:[1,157],60:[1,158],61:[1,159],62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),{15:$VA,49:$Vt,57:166,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:167,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($V11,[2,97]),o($V11,[2,98]),o($V11,[2,99]),{43:[1,168]},{2:[1,170],20:[1,169]},{52:$VU,53:$VV,69:[1,171]},o($V11,$VP),o($V21,[2,125],{76:172,77:$V31}),{52:$VU,53:$VV,69:[1,174]},o($V21,[2,129]),{2:[1,177],40:[1,176],80:175,82:[1,178]},{52:$VU,53:$VV,69:[1,179]},o($V21,[2,144]),{2:[1,181],68:[1,180]},{6:183,7:184,8:185,9:186,10:187,11:188,12:189,13:191,14:$V0,15:$V1,21:$V2,22:15,23:16,35:18,37:$V3,40:[1,182],74:190,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc},o($V41,[2,102]),o($V51,[2,112]),o($V51,[2,113]),o($V51,[2,114]),o($V51,[2,115]),o($V51,[2,116]),o($V51,[2,117]),o($V51,[2,118]),o($V51,[2,119]),o($V51,[2,120]),o($V51,[2,121]),{2:[1,193],20:[1,192]},{2:[1,195],20:[1,194]},{2:[1,197],7:199,15:[1,201],19:198,20:[1,196],32:72,33:73,34:74,35:200,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,50:202,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,50:203,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{18:$Vf,24:$Vg,25:$Vh,42:$Vi,87:[1,204]},{15:[1,205]},o($V21,[2,153]),{15:[1,206]},{69:[1,207]},{2:[1,209],20:[1,208]},{2:$VG,15:$VH,17:211,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,39:210,44:$VM},{15:[1,214],69:[1,212],95:213},o($Ve,[2,165]),{2:[1,217],18:[1,215],20:[1,216]},o($V61,[2,44]),o($V61,[2,45]),o($V61,$V71,{42:[1,218]}),o($V61,$V81,{42:[1,219]}),o($V61,$V91,{42:[1,220]}),o($V61,$Va1,{43:[1,221]}),o($V61,$Vb1,{43:[1,222]}),o([2,16,18,20,38,46,48,69],[2,43]),{45:[1,223]},{2:[1,225],20:[1,224]},{18:[1,226]},{2:[1,228],20:[1,227]},o($Ve,[2,71]),o($Ve,[2,72]),o($VN,[2,51]),o($VN,[2,52]),{2:$Vp,15:$Vq,19:231,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,69:[1,229],70:$Vy,71:$Vz,96:230},{15:[1,233],40:[1,232]},{16:[1,234]},{43:[1,235],48:[1,236]},o($Vc1,[2,69]),{15:$VA,49:$Vt,50:237,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,50:238,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,50:239,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($VW,[2,79]),{15:$VA,49:$Vt,57:240,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:241,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:242,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:243,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:244,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:245,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:246,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:247,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:248,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:249,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:250,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,57:251,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01,69:[1,252]},o($Vd1,[2,96],{64:$VZ,65:$V_,66:$V$,67:$V01}),o([2,18,20,43,48,69],[2,70]),o($Ve,[2,73]),o($Ve,[2,74]),{38:$Vk,72:253},o($V21,[2,124]),{8:255,38:$Vk,72:254,75:$V4},{38:$VB,79:256},{40:[1,258],81:257,82:[1,259],83:[1,260]},o($V21,[2,132]),{40:[1,261]},{15:$VA,49:$Vt,50:262,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{38:$Vk,72:263},{15:$VA,49:$Vt,50:264,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($V21,[2,146]),o($V41,[2,101]),o($V51,[2,103]),o($V51,[2,104]),o($V51,[2,105]),o($V51,[2,106]),o($V51,[2,107]),o($V51,[2,108]),o($V51,[2,109]),o($V51,[2,110]),o($V51,[2,111]),o($V51,[2,154]),o($V51,[2,155]),o($V51,[2,156]),o($V51,[2,157]),o($V51,[2,158]),o($V51,[2,159],{2:$VT,20:$VT}),{2:[1,266],20:[1,265]},o($V51,[2,162]),o($Ve1,$VO,{18:$Vj}),o([2,20,45,46,51,52,53,58,59,60,61,62,63,64,65,66,67],$VP,{18:$Vf,24:$VQ,25:$VR,42:$Vi,68:$VS}),{20:[1,267],52:$VU,53:$VV},{20:[1,268],52:$VU,53:$VV},{15:[1,269]},{2:$Vl,16:$Vm,18:$Vn,20:$Vo,87:[1,270],90:[1,271]},{90:[1,272]},{2:[1,274],20:[1,273]},o($V21,[2,174]),o($V21,[2,175]),{2:$VG,15:$VH,17:276,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,40:[1,275],44:$VM},{16:[1,277]},{16:[1,278]},{48:[1,280],69:[1,279]},{16:[1,281]},{2:$Vp,15:$Vq,19:282,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($Ve,[2,28]),o($Ve,[2,29]),{43:[1,283]},{43:[1,284]},{43:[1,285]},{43:[1,286]},{43:[1,287]},{2:$VG,15:[1,293],26:288,27:[1,289],28:[1,290],29:[1,291],30:[1,292]},o($Ve,[2,24]),o($Ve,[2,25]),{2:$Vp,15:$Vq,19:294,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($Ve,[2,26]),o($Ve,[2,27]),o($VN,[2,166]),{48:[1,296],69:[1,295]},o($Vf1,[2,171]),o($VN,[2,58]),{16:[1,297]},{2:$Vp,15:$Vq,19:298,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($VN,[2,67]),{2:$Vp,15:$Vq,19:299,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{16:[1,300],52:$VU,53:$VV},o($VW,[2,77]),o([2,16,20,43,48,51,53,69],[2,78],{52:$VU}),o($VW,[2,82],{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),o($VW,[2,83],{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),o($VW,[2,84],{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),o($VW,[2,85],{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),o($VW,[2,86],{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),o($VW,[2,87],{62:$VX,63:$VY,64:$VZ,65:$V_,66:$V$,67:$V01}),o($Vd1,[2,89],{64:$VZ,65:$V_,66:$V$,67:$V01}),o($Vd1,[2,90],{64:$VZ,65:$V_,66:$V$,67:$V01}),o($Vg1,[2,91],{66:$V$}),o($Vg1,[2,92],{66:$V$}),o($V11,[2,93]),o($Vg1,[2,94],{66:$V$}),o($V11,[2,95]),o($V21,[2,123],{76:301,77:$V31}),o($V21,[2,126]),o($V21,[2,127]),o($V21,[2,128]),{40:[1,302]},o($V21,[2,131]),{15:$VA,49:$Vt,50:303,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{16:[1,304]},o($V21,[2,133]),{16:[1,305],52:$VU,53:$VV},o($V21,[2,143]),{52:$VU,53:$VV,69:[1,306]},o($V51,[2,160]),o($V51,[2,161]),{15:$VA,49:$Vt,50:307,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{15:$VA,49:$Vt,50:308,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{69:[1,309]},{15:[1,310]},{15:[1,311]},{15:[1,312]},o($V21,[2,172]),o($V21,[2,173]),{2:[1,314],20:[1,313]},{16:[1,315]},{15:[1,316]},{2:$VG,15:$VH,17:317,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,44:$VM},{16:[1,318]},{15:[1,319]},{2:$VG,15:$VH,17:320,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,44:$VM},{2:[1,322],20:[1,321]},o($V61,[2,61]),o($V61,[2,62]),o($V61,[2,63]),o($V61,[2,64]),o($V61,[2,65]),{46:[1,323]},{46:$V71},{46:$V81},{46:$V91},{46:$Va1},{46:$Vb1},{2:[1,325],20:[1,324]},o($VN,[2,167]),{2:$Vp,15:$Vq,19:326,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{2:$Vp,15:$Vq,19:327,32:72,33:73,34:74,35:75,36:76,38:$Vr,42:$Vs,49:$Vt,50:81,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},{20:[1,328]},o($Vc1,[2,68]),{15:$VA,49:$Vt,50:329,54:$Vu,55:$Vv,56:84,57:85,63:$Vw,68:$Vx,70:$Vy,71:$Vz},o($V21,[2,122]),o($V21,[2,130]),{16:[1,330],52:$VU,53:$VV},{2:$VC,6:104,7:105,8:106,9:107,10:108,11:109,12:110,13:112,14:$V0,15:$V1,21:$V2,22:15,23:16,35:18,37:$V3,38:$Vk,40:[2,142],72:332,73:331,74:111,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc},o($Vh1,[2,139],{22:15,23:16,35:18,6:104,7:105,8:106,9:107,10:108,11:109,12:110,74:111,13:112,73:333,72:334,2:$VC,14:$V0,15:$V1,21:$V2,37:$V3,38:$Vk,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc}),o($V21,[2,145]),{52:$VU,53:$VV,69:[1,335]},{52:$VU,53:$VV,69:[1,336]},{38:$Vk,72:337},{69:[1,338]},{69:[1,339]},{69:[1,340]},o($Ve,[2,54]),o($Ve,[2,55]),{15:[1,341]},{20:[1,342]},{38:$Vk,72:343},{2:$VG,15:$VH,17:344,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,44:$VM},{16:[1,345]},o($Vf1,[2,169]),o($Ve,$Ve1),o($Ve,[2,21]),o($V61,[2,66]),o($Ve,[2,22]),o($Ve,[2,23]),o($Vf1,[2,170]),{20:[1,346]},o($Vi1,[2,60]),o($VN,[2,75],{52:$VU,53:$VV}),o($Vh1,[2,136],{22:15,23:16,35:18,6:104,7:105,8:106,9:107,10:108,11:109,12:110,74:111,13:112,73:347,72:348,2:$VC,14:$V0,15:$V1,21:$V2,37:$V3,38:$Vk,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc}),{6:183,7:184,8:185,9:186,10:187,11:188,12:189,13:191,14:$V0,15:$V1,21:$V2,22:15,23:16,35:18,37:$V3,40:[2,140],74:190,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc},{40:[2,141]},o($Vh1,[2,137],{22:15,23:16,35:18,6:183,7:184,8:185,9:186,10:187,11:188,12:189,74:190,13:191,14:$V0,15:$V1,21:$V2,37:$V3,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc}),o($Vh1,[2,138]),{38:$Vk,72:349},{38:$Vk,72:350},o($V21,[2,149]),{38:$Vk,72:351},{38:$Vk,72:352},{38:$Vk,72:353},{20:[1,354]},o($Vj1,[2,57]),o($Ve,[2,163]),{38:$Vk,72:355},{2:$VG,15:$VH,17:356,26:129,27:$VI,28:$VJ,29:$VK,30:$VL,31:130,44:$VM},o($Vi1,[2,59]),o($Vh1,[2,134],{22:15,23:16,35:18,6:183,7:184,8:185,9:186,10:187,11:188,12:189,74:190,13:191,14:$V0,15:$V1,21:$V2,37:$V3,75:$V4,78:$V5,84:$V6,85:$V7,86:$V8,88:$V9,91:$VD,92:$VE,93:$VF,94:$Va,97:$Vb,98:$Vc}),o($Vh1,[2,135]),o($V21,[2,147]),o($V21,[2,148]),o($V21,[2,150]),o($V21,[2,152]),o($V21,[2,151]),o($Vj1,[2,56]),o($Ve,[2,164]),o($Vf1,[2,168])],
defaultActions: {3:[2,2],29:[2,1],289:[2,38],290:[2,39],291:[2,40],292:[2,41],293:[2,42],332:[2,141]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  var valcadena = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comentarios"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: this.popState(); return 5; 
break;
case 4: this.begin("comentariomulti"); 
break;
case 5: this.popState(); 
break;
case 6:  
break;
case 7:  
break;
case 8: this.begin("tstring"); 
break;
case 9: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 70;
                                
break;
case 10: valcadena +='\n'; 
break;
case 11: valcadena +='\t'; 
break;
case 12: valcadena +='\\'; 
break;
case 13: valcadena +='\r'; 
break;
case 14: valcadena +='\"'; 
break;
case 15: valcadena += yy_.yytext; 
break;
case 16: this.begin("tstring2"); 
break;
case 17: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 70;
                                
break;
case 18: valcadena +='\n'; 
break;
case 19: valcadena +='\t'; 
break;
case 20: valcadena +='\\'; 
break;
case 21: valcadena +='\r'; 
break;
case 22: valcadena +='\"'; 
break;
case 23: valcadena += yy_.yytext; 
break;
case 24: this.begin("ttstring"); 
break;
case 25: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 70;
                                
break;
case 26: valcadena +='\n'; 
break;
case 27: valcadena +='\t'; 
break;
case 28: valcadena +='\\'; 
break;
case 29: valcadena +='\r'; 
break;
case 30: valcadena +='\"'; 
break;
case 31: valcadena += yy_.yytext; 
break;
case 32: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_comilladoble'; 
break;
case 33: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_barrainvertida'; 
break;
case 34: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_salto'; 
break;
case 35: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_retorno'; 
break;
case 36: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_tab'; 
break;
case 37: console.log("tipo de dato:"+yy_.yytext);  return 27; 
break;
case 38: console.log("tipo de dato:"+yy_.yytext);  return 28; 
break;
case 39: console.log("tipo de dato:"+yy_.yytext);  return 29; 
break;
case 40: console.log("tipo de dato:"+yy_.yytext);  return 30; 
break;
case 41: console.log("tipo de dato:"+yy_.yytext);  return 37; 
break;
case 42: console.log("inicio array:"+yy_.yytext);  return 44; 
break;
case 43: console.log("accion array:"+yy_.yytext);  return 'tk_push'; 
break;
case 44: console.log("accion array:"+yy_.yytext);  return 'tk_pop'; 
break;
case 45: console.log("accion array:"+yy_.yytext);  return 'tk_lenght'; 
break;
case 46: console.log("declaracion:"+yy_.yytext);  return 14; 
break;
case 47: console.log("declaracion:"+yy_.yytext);  return 21; 
break;
case 48: console.log("boolean:"+yy_.yytext);  return 55; 
break;
case 49: console.log("boolean:"+yy_.yytext);  return 55; 
break;
case 50: console.log("sentencias:"+yy_.yytext);  return 75; 
break;
case 51: console.log("sentencias:"+yy_.yytext);  return 77; 
break;
case 52: console.log("sentencias:"+yy_.yytext);  return 78; 
break;
case 53: console.log("sentencias:"+yy_.yytext);  return 82; 
break;
case 54: console.log("sentencias:"+yy_.yytext);  return 83; 
break;
case 55: console.log("sentencias:"+yy_.yytext);  return 84; 
break;
case 56: console.log("sentencias:"+yy_.yytext);  return 85; 
break;
case 57: console.log("sentencias:"+yy_.yytext);  return 86; 
break;
case 58: console.log("sentencias:"+yy_.yytext);  return 87; 
break;
case 59: console.log("sentencias:"+yy_.yytext);  return 90; 
break;
case 60: console.log("transferencia:"+yy_.yytext);  return 91; 
break;
case 61: console.log("transferencia:"+yy_.yytext);  return 92; 
break;
case 62: console.log("transferencia:"+yy_.yytext);  return 93; 
break;
case 63: console.log("funcion:"+yy_.yytext);  return 94; 
break;
case 64: console.log("funcion:"+yy_.yytext);  return 97; 
break;
case 65: console.log("funcion:"+yy_.yytext);  return 98; 
break;
case 66: console.log("arimetica:"+yy_.yytext); return 66; 
break;
case 67: console.log("arimetica:"+yy_.yytext); return 24; 
break;
case 68: console.log("arimetica:"+yy_.yytext); return 25; 
break;
case 69: console.log("arimetica:"+yy_.yytext); return 62; 
break;
case 70: console.log("arimetica:"+yy_.yytext); return 63; 
break;
case 71: console.log("arimetica:"+yy_.yytext); return 64; 
break;
case 72: console.log("arimetica:"+yy_.yytext); return 65; 
break;
case 73: console.log("arimetica:"+yy_.yytext); return 67; 
break;
case 74: console.log("relacional:"+yy_.yytext); return 58; 
break;
case 75: console.log("relacional:"+yy_.yytext); return 59; 
break;
case 76: console.log("relacional:"+yy_.yytext); return 60; 
break;
case 77: console.log("relacional:"+yy_.yytext); return 61; 
break;
case 78: console.log("relacional:"+yy_.yytext); return 46; 
break;
case 79: console.log("relacional:"+yy_.yytext); return 45; 
break;
case 80: console.log("Logica:"+yy_.yytext); return 52; 
break;
case 81: console.log("Logica:"+yy_.yytext); return 53; 
break;
case 82: console.log("Logica:"+yy_.yytext); return 54; 
break;
case 83: console.log("ternario:"+yy_.yytext); return 51; 
break;
case 84: console.log("simbolo:"+yy_.yytext); return 42; 
break;
case 85: console.log("simbolo:"+yy_.yytext); return 43; 
break;
case 86: console.log("simbolo:"+yy_.yytext); return 16; 
break;
case 87: console.log("simbolo:"+yy_.yytext); return 18; 
break;
case 88: console.log("simbolo:"+yy_.yytext); return 20; 
break;
case 89: console.log("simbolo:"+yy_.yytext); return 38; 
break;
case 90: console.log("simbolo:"+yy_.yytext); return 40; 
break;
case 91: console.log("simbolo:"+yy_.yytext); return 48; 
break;
case 92: console.log("simbolo:"+yy_.yytext); return 68; 
break;
case 93: console.log("simbolo:"+yy_.yytext); return 69; 
break;
case 94: console.log("numero decimal:"+yy_.yytext);  return 71; 
break;
case 95: console.log("numero entero:"+yy_.yytext);  return 49; 
break;
case 96:  console.log("id:"+yy_.yytext); return 15; 
break;
case 97: /*se ignoran*/ 
break;
case 98:  return 5;  
break;
case 99:  console.error("Error Lexico:"+yy_.yytext); 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:["])/,/^(?:["])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:['])/,/^(?:['])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:[`])/,/^(?:[`])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:\\")/,/^(?:\\\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Lenght\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[[a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*|["_"]+[0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"ttstring":{"rules":[25,26,27,28,29,30,31],"inclusive":false},"tstring2":{"rules":[17,18,19,20,21,22,23],"inclusive":false},"tstring":{"rules":[9,10,11,12,13,14,15],"inclusive":false},"comentariomulti":{"rules":[5,6,7],"inclusive":false},"comentarios":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,16,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}