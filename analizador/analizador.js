/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,11],$V2=[1,16],$V3=[1,12],$V4=[1,24],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,25],$Vc=[2,5,13,14,20,34,74,77,83,84,85,87,93],$Vd=[2,5,13,14,20,34,37,46,53,54,62,67,69,70,74,77,81,82,83,84,85,87,90,91,92,93],$Ve=[1,36],$Vf=[1,39],$Vg=[1,37],$Vh=[1,38],$Vi=[1,40],$Vj=[1,45],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,64],$Vo=[1,61],$Vp=[1,62],$Vq=[1,72],$Vr=[1,65],$Vs=[1,66],$Vt=[1,70],$Vu=[1,69],$Vv=[1,71],$Vw=[1,73],$Vx=[1,79],$Vy=[1,93],$Vz=[1,94],$VA=[1,95],$VB=[1,110],$VC=[1,106],$VD=[1,107],$VE=[1,108],$VF=[1,109],$VG=[1,111],$VH=[19,40,45,68],$VI=[2,36],$VJ=[1,122],$VK=[1,123],$VL=[2,85],$VM=[1,124],$VN=[15,19,40,45,50,51,52,68],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,137],$VU=[15,19,40,42,43,45,50,51,52,57,58,59,60,61,62,63,64,65,66,68],$VV=[2,5,13,14,20,34,37,46,53,54,62,67,69,70,74,76,77,81,82,83,84,85,87,90,91,92,93],$VW=[2,13,14,20,34,37,74,77,81,82,83,84,85,87,90,91,92,93],$VX=[15,17,19,35,45,68],$VY=[2,26],$VZ=[2,27],$V_=[2,28],$V$=[2,29],$V01=[2,30],$V11=[14,37],$V21=[40,45],$V31=[15,19,40,42,43,45,50,51,52,57,58,59,60,61,62,68],$V41=[14,24,25,26,27,37,41],$V51=[45,68],$V61=[15,19,40,42,43,45,50,51,52,57,58,59,60,61,62,63,64,66,68],$V71=[2,5,13,14,20,34,37,74,77,81,82,83,84,85,87,90,91,92,93],$V81=[37,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"I":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"IF":8,"SWITCH":9,"WHILE":10,"DOWHILE":11,"FOR":12,"tk_let":13,"tk_id":14,"tk_dospuntos":15,"TIPOV2":16,"tk_igual":17,"VALOR":18,"tk_puntoycoma":19,"tk_const":20,"TYPES":21,"DECFUNCION":22,"TIPOV":23,"tk_string":24,"tk_number":25,"tk_boolean":26,"tk_void":27,"ARRAY":28,"ASIGTYPE":29,"VARRAY":30,"T":31,"VALARRAY":32,"VALFUNCION":33,"tk_type":34,"tk_llavea":35,"LTYPE":36,"tk_llavec":37,"LASIGTYPE":38,"tk_llaveca":39,"tk_llavecc":40,"tk_array":41,"tk_menor":42,"tk_mayor":43,"LVALARRAY":44,"tk_coma":45,"tk_t_entero":46,"tk_inc":47,"tk_dec":48,"L":49,"tk_ternario":50,"tk_and":51,"tk_or":52,"tk_not":53,"tk_t_boolean":54,"R":55,"A":56,"tk_mayorigual":57,"tk_menorigual":58,"tk_igualdad":59,"tk_diferente":60,"tk_suma":61,"tk_resta":62,"tk_mult":63,"tk_div":64,"tk_exp":65,"tk_mod":66,"tk_pabierto":67,"tk_pcerrado":68,"tk_t_string":69,"tk_t_decimal":70,"BSENTENCIAS":71,"SENTENCIAS":72,"ST":73,"tk_if":74,"ELSE":75,"tk_else":76,"tk_switch":77,"BSWITCH":78,"CASE":79,"DEFAULT":80,"tk_case":81,"tk_default":82,"tk_while":83,"tk_do":84,"tk_for":85,"tk_in":86,"tk":87,"for":88,"tk_of":89,"tk_break":90,"tk_continue":91,"tk_return":92,"tk_fn":93,"PARFUNC":94,"LPAR":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"tk_let",14:"tk_id",15:"tk_dospuntos",17:"tk_igual",19:"tk_puntoycoma",20:"tk_const",24:"tk_string",25:"tk_number",26:"tk_boolean",27:"tk_void",34:"tk_type",35:"tk_llavea",37:"tk_llavec",39:"tk_llaveca",40:"tk_llavecc",41:"tk_array",42:"tk_menor",43:"tk_mayor",45:"tk_coma",46:"tk_t_entero",47:"tk_inc",48:"tk_dec",50:"tk_ternario",51:"tk_and",52:"tk_or",53:"tk_not",54:"tk_t_boolean",57:"tk_mayorigual",58:"tk_menorigual",59:"tk_igualdad",60:"tk_diferente",61:"tk_suma",62:"tk_resta",63:"tk_mult",64:"tk_div",65:"tk_exp",66:"tk_mod",67:"tk_pabierto",68:"tk_pcerrado",69:"tk_t_string",70:"tk_t_decimal",74:"tk_if",76:"tk_else",77:"tk_switch",81:"tk_case",82:"tk_default",83:"tk_while",84:"tk_do",85:"tk_for",86:"tk_in",87:"tk",88:"for",89:"tk_of",90:"tk_break",91:"tk_continue",92:"tk_return",93:"tk_fn"},
productions_: [0,[3,2],[3,1],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[6,7],[6,7],[6,5],[6,5],[6,5],[6,3],[6,1],[6,1],[6,1],[23,1],[23,1],[23,1],[23,1],[23,1],[16,1],[16,1],[18,1],[18,1],[18,1],[18,1],[18,1],[21,6],[36,5],[36,4],[36,1],[29,3],[38,5],[38,4],[38,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[30,3],[44,3],[44,1],[32,4],[7,4],[7,3],[7,3],[7,4],[31,5],[31,1],[49,3],[49,3],[49,2],[49,1],[49,1],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,1],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,2],[56,1],[56,1],[56,1],[56,1],[71,3],[71,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,2],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[8,6],[8,5],[75,2],[75,2],[9,5],[78,4],[78,3],[78,2],[79,5],[79,5],[79,4],[79,4],[79,4],[79,3],[80,3],[80,3],[80,2],[10,5],[11,6],[12,8],[12,8],[12,7],[12,8],[12,8],[12,8],[73,2],[73,2],[73,2],[73,3],[73,2],[22,7],[22,8],[33,3],[33,4],[94,5],[94,3],[95,3],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V1,14:$V2,20:$V3,21:13,22:14,32:17,34:$V4,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,93:$Vb},{1:[3]},{2:$V0,5:[1,26],6:27,7:28,8:29,9:30,10:31,11:32,12:33,13:$V1,14:$V2,20:$V3,21:13,22:14,32:17,34:$V4,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,93:$Vb},{1:[2,2]},o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),{14:[1,34]},{14:[1,35]},o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,25]),{17:$Ve,39:$Vf,47:$Vg,48:$Vh},{17:$Vi},{67:[1,41]},{67:[1,42]},{67:[1,43]},{35:$Vj,71:44},{67:[1,46]},{88:[1,47]},{14:[1,48]},{14:[1,49]},{1:[2,1]},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),{15:$Vk,17:$Vl,19:$Vm},{15:[1,53],17:[1,54]},{14:$Vn,18:55,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{19:[1,74]},{19:[1,75]},{46:[1,76]},{14:$Vn,18:77,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:78,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:80,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:81,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{83:[1,82]},{2:$V0,6:85,7:86,8:87,9:88,10:89,11:90,12:91,13:$V1,14:$V2,20:$V3,21:13,22:14,32:17,34:$V4,37:[1,84],72:83,73:92,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb},{2:$V0,6:96,7:97,13:[1,99],14:[1,98],20:$V3,21:13,22:14,32:17,34:$V4,93:$Vb},{67:[1,100]},{35:[1,101]},{67:[1,102]},{14:$VB,16:103,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,41:$VG},{14:$Vn,18:112,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($Vd,[2,22]),{14:$VB,16:113,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,41:$VG},{14:$Vn,18:114,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{19:[1,115]},o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,$VI),o($VH,[2,37]),{2:[1,118],14:[1,117],38:116},{14:$Vn,18:120,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,44:119,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($VH,[2,61],{50:[1,121],51:$VJ,52:$VK}),o([19,40,42,43,45,50,51,52,57,58,59,60,61,62,63,64,65,66,68],$VL,{39:$Vf,67:$VM}),{14:$Vx,46:$Vq,49:125,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($VN,[2,65]),o($VN,[2,66]),o($VN,[2,73],{42:[1,127],43:[1,126],57:[1,128],58:[1,129],59:[1,130],60:[1,131],61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),{14:$Vx,46:$Vq,56:138,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:139,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($VU,[2,82]),o($VU,[2,83]),o($VU,[2,84]),o($Vd,[2,57]),o($Vd,[2,58]),{40:[1,140]},{19:[1,141]},{51:$VJ,52:$VK,68:[1,142]},o($VU,$VL),{51:$VJ,52:$VK,68:[1,143]},{51:$VJ,52:$VK,68:[1,144]},{67:[1,145]},{2:$V0,6:147,7:148,8:149,9:150,10:151,11:152,12:153,13:$V1,14:$V2,20:$V3,21:13,22:14,32:17,34:$V4,37:[1,146],73:154,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb},o($VV,[2,87]),o($VW,[2,96]),o($VW,[2,97]),o($VW,[2,98]),o($VW,[2,99]),o($VW,[2,100]),o($VW,[2,101]),o($VW,[2,102]),o($VW,[2,103]),{19:[1,155]},{19:[1,156]},{7:159,14:[1,161],18:158,19:[1,157],29:56,30:57,31:58,32:160,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:162,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:163,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{17:$Ve,39:$Vf,47:$Vg,48:$Vh,86:[1,164]},{14:[1,165]},{14:[1,166]},{2:[1,169],14:$VB,16:168,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,36:167,41:$VG},{14:[1,172],68:[1,170],94:171},{17:[1,173],19:[1,174]},o($VX,[2,31]),o($VX,[2,32]),o($VX,$VY,{39:[1,175]}),o($VX,$VZ,{39:[1,176]}),o($VX,$V_,{39:[1,177]}),o($VX,$V$,{40:[1,178]}),o($VX,$V01,{40:[1,179]}),{42:[1,180]},{19:[1,181]},{17:[1,182]},{19:[1,183]},o($Vd,[2,56]),{14:[1,185],37:[1,184]},{15:[1,186]},o($V11,[2,45]),{40:[1,187],45:[1,188]},o($V21,[2,54]),{14:$Vx,46:$Vq,49:189,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:190,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:191,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vn,18:194,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,68:[1,192],69:$Vv,70:$Vw,95:193},o($VN,[2,64]),{14:$Vx,46:$Vq,56:195,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:196,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:197,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:198,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:199,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:200,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:201,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:202,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:203,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:204,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:205,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,56:206,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,68:[1,207]},o($V31,[2,81],{63:$VQ,64:$VR,65:$VS,66:$VT}),o([17,19,40,45,68],[2,55]),o($Vd,[2,59]),{35:$Vj,71:208},{35:[1,210],78:209},{35:$Vj,71:211},{14:$Vx,46:$Vq,49:212,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($VV,[2,86]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),o($VW,[2,95]),o($VW,[2,129]),o($VW,[2,130]),o($VW,[2,131]),{19:[1,213]},o($VW,[2,133]),{17:$Vi,19:$VI},o([19,42,43,50,51,52,57,58,59,60,61,62,63,64,65,66],$VL,{17:$Ve,39:$Vf,47:$Vg,48:$Vh,67:$VM}),{19:[1,214],51:$VJ,52:$VK},{19:[1,215],51:$VJ,52:$VK},{14:[1,216]},{15:$Vk,17:$Vl,19:$Vm,86:[1,217],89:[1,218]},{89:[1,219]},{14:$VB,16:221,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,37:[1,220],41:$VG},{15:[1,222]},o($V41,[2,41]),{15:[1,223]},{45:[1,225],68:[1,224]},{15:[1,226]},{14:$Vn,18:227,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($Vd,[2,21]),{40:[1,228]},{40:[1,229]},{40:[1,230]},{40:[1,231]},{40:[1,232]},{14:[1,238],23:233,24:[1,234],25:[1,235],26:[1,236],27:[1,237]},o($Vd,[2,19]),{14:$Vn,18:239,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($Vd,[2,20]),o($VH,[2,42]),{15:[1,240]},{14:$Vn,18:241,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($VH,[2,52]),{14:$Vn,18:242,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{15:[1,243],51:$VJ,52:$VK},o($VN,[2,62]),o([15,19,40,45,50,52,68],[2,63],{51:$VJ}),o($VH,[2,136]),{45:[1,245],68:[1,244]},o($V51,[2,141]),o($VN,[2,67],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VN,[2,68],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VN,[2,69],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VN,[2,70],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VN,[2,71],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VN,[2,72],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V31,[2,74],{63:$VQ,64:$VR,65:$VS,66:$VT}),o($V31,[2,75],{63:$VQ,64:$VR,65:$VS,66:$VT}),o($V61,[2,76],{65:$VS}),o($V61,[2,77],{65:$VS}),o($VU,[2,78]),o($V61,[2,79],{65:$VS}),o($VU,[2,80]),o($V71,[2,105],{75:246,76:[1,247]}),o($V71,[2,108]),{37:[1,249],79:248,81:[1,250]},o($V71,[2,121]),{51:$VJ,52:$VK,68:[1,251]},o($VW,[2,132]),{14:$Vx,46:$Vq,49:252,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{14:$Vx,46:$Vq,49:253,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{68:[1,254]},{14:[1,255]},{14:[1,256]},{14:[1,257]},{19:[1,258]},{15:[1,259]},{14:[1,260]},{14:$VB,16:261,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,41:$VG},{15:[1,262]},{14:[1,263]},{14:$VB,16:264,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,41:$VG},{19:[1,265]},o($VX,[2,46]),o($VX,[2,47]),o($VX,[2,48]),o($VX,[2,49]),o($VX,[2,50]),{43:[1,266]},{43:$VY},{43:$VZ},{43:$V_},{43:$V$},{43:$V01},{19:[1,267]},{14:$Vn,18:268,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{19:[1,269]},o($V21,[2,53]),{14:$Vx,46:$Vq,49:270,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($VH,[2,137]),{14:$Vn,18:271,29:56,30:57,31:58,32:59,33:60,35:$Vo,39:$Vp,46:$Vq,49:63,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($V71,[2,104]),{8:273,35:$Vj,71:272,74:$V5},{37:[1,275],80:274,81:[1,276],82:[1,277]},o($V71,[2,111]),{14:$Vx,46:$Vq,49:278,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},o($V71,[2,122]),{51:$VJ,52:$VK,68:[1,279]},{51:$VJ,52:$VK,68:[1,280]},{35:$Vj,71:281},{68:[1,282]},{68:[1,283]},{68:[1,284]},o($Vd,[2,38]),{14:[1,285]},{19:[1,286]},{35:$Vj,71:287},{14:$VB,16:288,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,41:$VG},{15:[1,289]},o($V51,[2,139]),o($Vd,[2,17]),o($VX,[2,51]),o($Vd,[2,18]),{19:[1,290]},o($V11,[2,44]),o($VH,[2,60],{51:$VJ,52:$VK}),o($V51,[2,140]),o($V71,[2,106]),o($V71,[2,107]),{37:[1,291]},o($V71,[2,110]),{14:$Vx,46:$Vq,49:292,53:$Vr,54:$Vs,55:67,56:68,62:$Vt,67:$Vu,69:$Vv,70:$Vw},{15:[1,293]},{15:[1,294],51:$VJ,52:$VK},{35:$Vj,71:295},{35:$Vj,71:296},o($V71,[2,125]),{35:$Vj,71:297},{35:$Vj,71:298},{35:$Vj,71:299},{19:[1,300]},o($V41,[2,40]),o($Vd,[2,134]),{35:$Vj,71:301},{14:$VB,16:302,23:104,24:$VC,25:$VD,26:$VE,27:$VF,28:105,41:$VG},o($V11,[2,43]),o($V71,[2,109]),{15:[1,303],51:$VJ,52:$VK},{2:$V0,6:85,7:86,8:87,9:88,10:89,11:90,12:91,13:$V1,14:$V2,20:$V3,21:13,22:14,32:17,34:$V4,35:$Vj,37:[2,120],71:305,72:304,73:92,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb},o($V81,[2,117],{21:13,22:14,32:17,6:85,7:86,8:87,9:88,10:89,11:90,12:91,73:92,72:306,71:307,2:$V0,13:$V1,14:$V2,20:$V3,34:$V4,35:$Vj,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb}),o($V71,[2,123]),o($V71,[2,124]),o($V71,[2,126]),o($V71,[2,128]),o($V71,[2,127]),o($V41,[2,39]),o($Vd,[2,135]),o($V51,[2,138]),o($V81,[2,114],{21:13,22:14,32:17,6:85,7:86,8:87,9:88,10:89,11:90,12:91,73:92,72:308,71:309,2:$V0,13:$V1,14:$V2,20:$V3,34:$V4,35:$Vj,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb}),{2:$V0,6:147,7:148,8:149,9:150,10:151,11:152,12:153,13:$V1,14:$V2,20:$V3,21:13,22:14,32:17,34:$V4,37:[2,118],73:154,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb},{37:[2,119]},o($V81,[2,115],{21:13,22:14,32:17,6:147,7:148,8:149,9:150,10:151,11:152,12:153,73:154,2:$V0,13:$V1,14:$V2,20:$V3,34:$V4,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb}),o($V81,[2,116]),o($V81,[2,112],{21:13,22:14,32:17,6:147,7:148,8:149,9:150,10:151,11:152,12:153,73:154,2:$V0,13:$V1,14:$V2,20:$V3,34:$V4,74:$V5,77:$V6,83:$V7,84:$V8,85:$V9,87:$Va,90:$Vy,91:$Vz,92:$VA,93:$Vb}),o($V81,[2,113])],
defaultActions: {3:[2,2],26:[2,1],234:[2,26],235:[2,27],236:[2,28],237:[2,29],238:[2,30],305:[2,119]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  var valcadena = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comentarios"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: this.popState(); return 5; 
break;
case 4: this.begin("comentariomulti"); 
break;
case 5: this.popState(); 
break;
case 6:  
break;
case 7:  
break;
case 8: this.begin("tstring"); 
break;
case 9: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 69;
                                
break;
case 10: valcadena +='\n'; 
break;
case 11: valcadena +='\t'; 
break;
case 12: valcadena +='\\'; 
break;
case 13: valcadena +='\r'; 
break;
case 14: valcadena +='\"'; 
break;
case 15: valcadena += yy_.yytext; 
break;
case 16: this.begin("tstring2"); 
break;
case 17: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 69;
                                
break;
case 18: valcadena +='\n'; 
break;
case 19: valcadena +='\t'; 
break;
case 20: valcadena +='\\'; 
break;
case 21: valcadena +='\r'; 
break;
case 22: valcadena +='\"'; 
break;
case 23: valcadena += yy_.yytext; 
break;
case 24: this.begin("ttstring"); 
break;
case 25: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 69;
                                
break;
case 26: valcadena +='\n'; 
break;
case 27: valcadena +='\t'; 
break;
case 28: valcadena +='\\'; 
break;
case 29: valcadena +='\r'; 
break;
case 30: valcadena +='\"'; 
break;
case 31: valcadena += yy_.yytext; 
break;
case 32: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_comilladoble'; 
break;
case 33: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_barrainvertida'; 
break;
case 34: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_salto'; 
break;
case 35: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_retorno'; 
break;
case 36: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_tab'; 
break;
case 37: console.log("tipo de dato:"+yy_.yytext);  return 24; 
break;
case 38: console.log("tipo de dato:"+yy_.yytext);  return 25; 
break;
case 39: console.log("tipo de dato:"+yy_.yytext);  return 26; 
break;
case 40: console.log("tipo de dato:"+yy_.yytext);  return 27; 
break;
case 41: console.log("tipo de dato:"+yy_.yytext);  return 34; 
break;
case 42: console.log("inicio array:"+yy_.yytext);  return 41; 
break;
case 43: console.log("accion array:"+yy_.yytext);  return 'tk_push'; 
break;
case 44: console.log("accion array:"+yy_.yytext);  return 'tk_pop'; 
break;
case 45: console.log("accion array:"+yy_.yytext);  return 'tk_lenght'; 
break;
case 46: console.log("declaracion:"+yy_.yytext);  return 13; 
break;
case 47: console.log("declaracion:"+yy_.yytext);  return 20; 
break;
case 48: console.log("boolean:"+yy_.yytext);  return 54; 
break;
case 49: console.log("boolean:"+yy_.yytext);  return 54; 
break;
case 50: console.log("sentencias:"+yy_.yytext);  return 74; 
break;
case 51: console.log("sentencias:"+yy_.yytext);  return 76; 
break;
case 52: console.log("sentencias:"+yy_.yytext);  return 77; 
break;
case 53: console.log("sentencias:"+yy_.yytext);  return 81; 
break;
case 54: console.log("sentencias:"+yy_.yytext);  return 82; 
break;
case 55: console.log("sentencias:"+yy_.yytext);  return 83; 
break;
case 56: console.log("sentencias:"+yy_.yytext);  return 84; 
break;
case 57: console.log("sentencias:"+yy_.yytext);  return 85; 
break;
case 58: console.log("sentencias:"+yy_.yytext);  return 86; 
break;
case 59: console.log("sentencias:"+yy_.yytext);  return 89; 
break;
case 60: console.log("transferencia:"+yy_.yytext);  return 90; 
break;
case 61: console.log("transferencia:"+yy_.yytext);  return 91; 
break;
case 62: console.log("transferencia:"+yy_.yytext);  return 92; 
break;
case 63: console.log("funcion:"+yy_.yytext);  return 93; 
break;
case 64: console.log("arimetica:"+yy_.yytext); return 65; 
break;
case 65: console.log("arimetica:"+yy_.yytext); return 47; 
break;
case 66: console.log("arimetica:"+yy_.yytext); return 48; 
break;
case 67: console.log("arimetica:"+yy_.yytext); return 61; 
break;
case 68: console.log("arimetica:"+yy_.yytext); return 62; 
break;
case 69: console.log("arimetica:"+yy_.yytext); return 63; 
break;
case 70: console.log("arimetica:"+yy_.yytext); return 64; 
break;
case 71: console.log("arimetica:"+yy_.yytext); return 66; 
break;
case 72: console.log("relacional:"+yy_.yytext); return 57; 
break;
case 73: console.log("relacional:"+yy_.yytext); return 58; 
break;
case 74: console.log("relacional:"+yy_.yytext); return 59; 
break;
case 75: console.log("relacional:"+yy_.yytext); return 60; 
break;
case 76: console.log("relacional:"+yy_.yytext); return 43; 
break;
case 77: console.log("relacional:"+yy_.yytext); return 42; 
break;
case 78: console.log("Logica:"+yy_.yytext); return 51; 
break;
case 79: console.log("Logica:"+yy_.yytext); return 52; 
break;
case 80: console.log("Logica:"+yy_.yytext); return 53; 
break;
case 81: console.log("ternario:"+yy_.yytext); return 50; 
break;
case 82: console.log("simbolo:"+yy_.yytext); return 39; 
break;
case 83: console.log("simbolo:"+yy_.yytext); return 40; 
break;
case 84: console.log("simbolo:"+yy_.yytext); return 15; 
break;
case 85: console.log("simbolo:"+yy_.yytext); return 17; 
break;
case 86: console.log("simbolo:"+yy_.yytext); return 19; 
break;
case 87: console.log("simbolo:"+yy_.yytext); return 35; 
break;
case 88: console.log("simbolo:"+yy_.yytext); return 37; 
break;
case 89: console.log("simbolo:"+yy_.yytext); return 45; 
break;
case 90: console.log("simbolo:"+yy_.yytext); return 67; 
break;
case 91: console.log("simbolo:"+yy_.yytext); return 68; 
break;
case 92: console.log("numero decimal:"+yy_.yytext);  return 70; 
break;
case 93: console.log("numero entero:"+yy_.yytext);  return 46; 
break;
case 94:  console.log("id:"+yy_.yytext); return 14; 
break;
case 95: /*se ignoran*/ 
break;
case 96:  return 5;  
break;
case 97:  console.log("error:"+yy_.yytext); 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:["])/,/^(?:["])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:['])/,/^(?:['])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:[`])/,/^(?:[`])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:\\")/,/^(?:\\\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Lenght\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[[a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*|["_"]+[0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"ttstring":{"rules":[25,26,27,28,29,30,31],"inclusive":false},"tstring2":{"rules":[17,18,19,20,21,22,23],"inclusive":false},"tstring":{"rules":[9,10,11,12,13,14,15],"inclusive":false},"comentariomulti":{"rules":[5,6,7],"inclusive":false},"comentarios":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,16,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}