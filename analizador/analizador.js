/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,13],$V2=[1,11],$V3=[1,18],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[5,12,13,19,30,69,72,78,79],$V9=[5,12,13,19,30,33,69,72,76,77,78,79],$Va=[1,35],$Vb=[1,58],$Vc=[1,46],$Vd=[1,47],$Ve=[1,49],$Vf=[1,50],$Vg=[1,54],$Vh=[1,53],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,81],$Vm=[1,77],$Vn=[1,78],$Vo=[1,79],$Vp=[1,80],$Vq=[1,82],$Vr=[18,36,41],$Vs=[1,92],$Vt=[1,93],$Vu=[14,18,36,41,45,46,47,63],$Vv=[1,107],$Vw=[1,108],$Vx=[1,101],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[1,105],$VC=[1,106],$VD=[14,18,36,38,39,41,42,43,45,46,47,52,53,54,55,56,57,58,59,60,61,63],$VE=[5,12,13,19,30,33,69,71,72,76,77,78,79],$VF=[12,13,19,30,33,69,72,76,77,78,79],$VG=[14,16,18],$VH=[2,22],$VI=[2,23],$VJ=[2,24],$VK=[2,25],$VL=[2,26],$VM=[36,41],$VN=[14,18,36,38,39,41,45,46,47,52,53,54,55,56,57,63],$VO=[14,18,36,38,39,41,42,43,45,46,47,52,53,54,55,56,57,58,59,61,63],$VP=[13,33],$VQ=[13,22,23,24,25,33,37],$VR=[33,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"I":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"IF":8,"SWITCH":9,"WHILE":10,"DOWHILE":11,"tk_let":12,"tk_id":13,"tk_dospuntos":14,"TIPOV2":15,"tk_igual":16,"VALOR":17,"tk_puntoycoma":18,"tk_const":19,"TYPES":20,"TIPOV":21,"tk_string":22,"tk_number":23,"tk_boolean":24,"tk_void":25,"ARRAY":26,"ASIGTYPE":27,"VARRAY":28,"T":29,"tk_type":30,"tk_llavea":31,"LTYPE":32,"tk_llavec":33,"LASIGTYPE":34,"tk_llaveca":35,"tk_llavecc":36,"tk_array":37,"tk_menor":38,"tk_mayor":39,"LVALARRAY":40,"tk_coma":41,"tk_inc":42,"tk_dec":43,"L":44,"tk_ternario":45,"tk_and":46,"tk_or":47,"tk_not":48,"tk_t_boolean":49,"R":50,"A":51,"tk_mayorigual":52,"tk_menorigual":53,"tk_igualdad":54,"tk_diferente":55,"tk_suma":56,"tk_resta":57,"tk_mult":58,"tk_div":59,"tk_exp":60,"tk_mod":61,"tk_pabierto":62,"tk_pcerrado":63,"tk_t_string":64,"tk_t_entero":65,"tk_t_decimal":66,"BSENTENCIAS":67,"SENTENCIAS":68,"tk_if":69,"ELSE":70,"tk_else":71,"tk_switch":72,"BSWITCH":73,"CASE":74,"DEFAULT":75,"tk_case":76,"tk_default":77,"tk_while":78,"tk_do":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"tk_let",13:"tk_id",14:"tk_dospuntos",16:"tk_igual",18:"tk_puntoycoma",19:"tk_const",22:"tk_string",23:"tk_number",24:"tk_boolean",25:"tk_void",30:"tk_type",31:"tk_llavea",33:"tk_llavec",35:"tk_llaveca",36:"tk_llavecc",37:"tk_array",38:"tk_menor",39:"tk_mayor",41:"tk_coma",42:"tk_inc",43:"tk_dec",45:"tk_ternario",46:"tk_and",47:"tk_or",48:"tk_not",49:"tk_t_boolean",52:"tk_mayorigual",53:"tk_menorigual",54:"tk_igualdad",55:"tk_diferente",56:"tk_suma",57:"tk_resta",58:"tk_mult",59:"tk_div",60:"tk_exp",61:"tk_mod",62:"tk_pabierto",63:"tk_pcerrado",64:"tk_t_string",65:"tk_t_entero",66:"tk_t_decimal",69:"tk_if",71:"tk_else",72:"tk_switch",76:"tk_case",77:"tk_default",78:"tk_while",79:"tk_do"},
productions_: [0,[3,2],[3,1],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[6,7],[6,7],[6,5],[6,5],[6,5],[6,3],[6,1],[21,1],[21,1],[21,1],[21,1],[21,1],[15,1],[15,1],[17,1],[17,1],[17,1],[20,6],[32,5],[32,4],[27,3],[34,5],[34,4],[26,3],[26,3],[26,3],[26,3],[26,3],[26,4],[28,3],[40,3],[40,1],[7,4],[7,3],[7,3],[29,5],[29,1],[44,3],[44,3],[44,2],[44,1],[44,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,1],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,2],[51,3],[51,2],[51,1],[51,1],[51,1],[51,1],[67,3],[67,2],[68,2],[68,2],[68,2],[68,2],[68,2],[68,2],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[8,6],[8,5],[70,2],[70,2],[9,5],[73,4],[73,3],[73,2],[74,5],[74,5],[74,4],[74,4],[74,4],[74,3],[75,3],[75,3],[75,2],[10,5],[11,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:$V0,13:$V1,19:$V2,20:12,30:$V3,69:$V4,72:$V5,78:$V6,79:$V7},{1:[3]},{5:[1,19],6:20,7:21,8:22,9:23,10:24,11:25,12:$V0,13:$V1,19:$V2,20:12,30:$V3,69:$V4,72:$V5,78:$V6,79:$V7},{1:[2,2]},o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),o($V8,[2,14]),{13:[1,26]},{13:[1,27]},o($V9,[2,21]),{16:[1,28],42:[1,29],43:[1,30]},{62:[1,31]},{62:[1,32]},{62:[1,33]},{31:$Va,67:34},{13:[1,36]},{1:[2,1]},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),{14:[1,37],16:[1,38],18:[1,39]},{14:[1,40],16:[1,41]},{13:$Vb,17:42,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{18:[1,59]},{18:[1,60]},{13:$Vb,44:61,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,44:62,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,44:63,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{78:[1,64]},{6:67,7:68,8:69,9:70,10:71,11:72,12:$V0,13:$V1,19:$V2,20:12,30:$V3,33:[1,66],68:65,69:$V4,72:$V5,78:$V6,79:$V7},{31:[1,73]},{13:$Vl,15:74,21:75,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:76,37:$Vq},{13:$Vb,17:83,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($V9,[2,20]),{13:$Vl,15:84,21:75,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:76,37:$Vq},{13:$Vb,17:85,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{18:[1,86]},o($Vr,[2,29]),o($Vr,[2,30]),o($Vr,[2,31]),{13:[1,88],34:87},{13:$Vb,17:90,27:43,28:44,29:45,31:$Vc,35:$Vd,40:89,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($Vr,[2,51],{45:[1,91],46:$Vs,47:$Vt}),{13:$Vb,44:94,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($Vu,[2,55]),o($Vu,[2,56]),o($Vu,[2,63],{38:[1,96],39:[1,95],42:$Vv,43:$Vw,52:[1,97],53:[1,98],54:[1,99],55:[1,100],56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),{13:$Vb,51:109,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:110,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($V9,[2,48]),o($V9,[2,49]),{46:$Vs,47:$Vt,63:[1,111]},{46:$Vs,47:$Vt,63:[1,112]},{46:$Vs,47:$Vt,63:[1,113]},{62:[1,114]},{6:116,7:117,8:118,9:119,10:120,11:121,12:$V0,13:$V1,19:$V2,20:12,30:$V3,33:[1,115],69:$V4,72:$V5,78:$V6,79:$V7},o($VE,[2,79]),o($VF,[2,86]),o($VF,[2,87]),o($VF,[2,88]),o($VF,[2,89]),o($VF,[2,90]),o($VF,[2,91]),{13:$Vl,15:123,21:75,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:76,32:122,37:$Vq},{16:[1,124],18:[1,125]},o($VG,[2,27]),o($VG,[2,28]),o($VG,$VH,{35:[1,126]}),o($VG,$VI,{35:[1,127]}),o($VG,$VJ,{35:[1,128]}),o($VG,$VK,{36:[1,129]}),o($VG,$VL,{36:[1,130]}),{38:[1,131]},{18:[1,132]},{16:[1,133]},{18:[1,134]},o($V9,[2,47]),{13:[1,136],33:[1,135]},{14:[1,137]},{36:[1,138],41:[1,139]},o($VM,[2,46]),{13:$Vb,44:140,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,44:141,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,44:142,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($Vu,[2,54]),{13:$Vb,51:143,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:144,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:145,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:146,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:147,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:148,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:149,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:150,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:151,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:152,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:153,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{13:$Vb,51:154,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($VD,[2,70]),o($VD,[2,71]),{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,63:[1,155]},o($VN,[2,73],{42:$Vv,43:$Vw,58:$Vz,59:$VA,60:$VB,61:$VC}),{31:$Va,67:156},{31:[1,158],73:157},{31:$Va,67:159},{13:$Vb,44:160,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($VE,[2,78]),o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,82]),o($VF,[2,83]),o($VF,[2,84]),o($VF,[2,85]),{13:$Vl,15:162,21:75,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:76,33:[1,161],37:$Vq},{14:[1,163]},{13:$Vb,17:164,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($V9,[2,19]),{36:[1,165]},{36:[1,166]},{36:[1,167]},{36:[1,168]},{36:[1,169]},{13:[1,175],21:170,22:[1,171],23:[1,172],24:[1,173],25:[1,174]},o($V9,[2,17]),{13:$Vb,17:176,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($V9,[2,18]),o($Vr,[2,35]),{14:[1,177]},{13:$Vb,17:178,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($Vr,[2,44]),{13:$Vb,17:179,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{14:[1,180],46:$Vs,47:$Vt},o($Vu,[2,52]),o([14,18,36,41,45,47,63],[2,53],{46:$Vs}),o($Vu,[2,57],{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($Vu,[2,58],{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($Vu,[2,59],{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($Vu,[2,60],{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($Vu,[2,61],{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($Vu,[2,62],{42:$Vv,43:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC}),o($VN,[2,64],{42:$Vv,43:$Vw,58:$Vz,59:$VA,60:$VB,61:$VC}),o($VN,[2,65],{42:$Vv,43:$Vw,58:$Vz,59:$VA,60:$VB,61:$VC}),o($VO,[2,66],{60:$VB}),o($VO,[2,67],{60:$VB}),o($VD,[2,68]),o($VO,[2,69],{60:$VB}),o($VD,[2,72]),o($V9,[2,93],{70:181,71:[1,182]}),o($V9,[2,96]),{33:[1,184],74:183,76:[1,185]},o($V9,[2,109]),{46:$Vs,47:$Vt,63:[1,186]},{18:[1,187]},{14:[1,188]},{13:[1,189]},{18:[1,190]},o($VG,[2,38]),o($VG,[2,39]),o($VG,[2,40]),o($VG,[2,41]),o($VG,[2,42]),{39:[1,191]},{39:$VH},{39:$VI},{39:$VJ},{39:$VK},{39:$VL},{18:[1,192]},{13:$Vb,17:193,27:43,28:44,29:45,31:$Vc,35:$Vd,44:48,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{18:[1,194]},o($VM,[2,45]),{13:$Vb,44:195,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($V9,[2,92]),{8:197,31:$Va,67:196,69:$V4},{33:[1,199],75:198,76:[1,200],77:[1,201]},o($V9,[2,99]),{13:$Vb,44:202,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},o($V9,[2,110]),o($V9,[2,32]),{13:[1,203]},{18:[1,204]},o($V9,[2,15]),o($VG,[2,43]),o($V9,[2,16]),{18:[1,205]},o($VP,[2,37]),o($Vr,[2,50],{46:$Vs,47:$Vt}),o($V9,[2,94]),o($V9,[2,95]),{33:[1,206]},o($V9,[2,98]),{13:$Vb,44:207,48:$Ve,49:$Vf,50:51,51:52,57:$Vg,62:$Vh,64:$Vi,65:$Vj,66:$Vk},{14:[1,208]},{14:[1,209],46:$Vs,47:$Vt},{18:[1,210]},o($VQ,[2,34]),o($VP,[2,36]),o($V9,[2,97]),{14:[1,211],46:$Vs,47:$Vt},{6:67,7:68,8:69,9:70,10:71,11:72,12:$V0,13:$V1,19:$V2,20:12,30:$V3,31:$Va,33:[2,108],67:213,68:212,69:$V4,72:$V5,78:$V6,79:$V7},o($VR,[2,105],{20:12,6:67,7:68,8:69,9:70,10:71,11:72,68:214,67:215,12:$V0,13:$V1,19:$V2,30:$V3,31:$Va,69:$V4,72:$V5,78:$V6,79:$V7}),o($VQ,[2,33]),o($VR,[2,102],{20:12,6:67,7:68,8:69,9:70,10:71,11:72,68:216,67:217,12:$V0,13:$V1,19:$V2,30:$V3,31:$Va,69:$V4,72:$V5,78:$V6,79:$V7}),{6:116,7:117,8:118,9:119,10:120,11:121,12:$V0,13:$V1,19:$V2,20:12,30:$V3,33:[2,106],69:$V4,72:$V5,78:$V6,79:$V7},{33:[2,107]},o($VR,[2,103],{20:12,6:116,7:117,8:118,9:119,10:120,11:121,12:$V0,13:$V1,19:$V2,30:$V3,69:$V4,72:$V5,78:$V6,79:$V7}),o($VR,[2,104]),o($VR,[2,100],{20:12,6:116,7:117,8:118,9:119,10:120,11:121,12:$V0,13:$V1,19:$V2,30:$V3,69:$V4,72:$V5,78:$V6,79:$V7}),o($VR,[2,101])],
defaultActions: {3:[2,2],19:[2,1],171:[2,22],172:[2,23],173:[2,24],174:[2,25],175:[2,26],213:[2,107]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var valcadena = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comentarios"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: this.popState(); return 5; 
break;
case 4: this.begin("comentariomulti"); 
break;
case 5: this.popState(); 
break;
case 6:  
break;
case 7:  
break;
case 8: this.begin("tstring"); 
break;
case 9: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 64;
                                
break;
case 10: valcadena +='\n'; 
break;
case 11: valcadena +='\t'; 
break;
case 12: valcadena +='\\'; 
break;
case 13: valcadena +='\r'; 
break;
case 14: valcadena +='\"'; 
break;
case 15: valcadena += yy_.yytext; 
break;
case 16: this.begin("tstring2"); 
break;
case 17: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 64;
                                
break;
case 18: valcadena +='\n'; 
break;
case 19: valcadena +='\t'; 
break;
case 20: valcadena +='\\'; 
break;
case 21: valcadena +='\r'; 
break;
case 22: valcadena +='\"'; 
break;
case 23: valcadena += yy_.yytext; 
break;
case 24: this.begin("ttstring"); 
break;
case 25: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 64;
                                
break;
case 26: valcadena +='\n'; 
break;
case 27: valcadena +='\t'; 
break;
case 28: valcadena +='\\'; 
break;
case 29: valcadena +='\r'; 
break;
case 30: valcadena +='\"'; 
break;
case 31: valcadena += yy_.yytext; 
break;
case 32: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_comilladoble'; 
break;
case 33: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_barrainvertida'; 
break;
case 34: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_salto'; 
break;
case 35: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_retorno'; 
break;
case 36: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_tab'; 
break;
case 37: console.log("tipo de dato:"+yy_.yytext);  return 22; 
break;
case 38: console.log("tipo de dato:"+yy_.yytext);  return 23; 
break;
case 39: console.log("tipo de dato:"+yy_.yytext);  return 24; 
break;
case 40: console.log("tipo de dato:"+yy_.yytext);  return 25; 
break;
case 41: console.log("tipo de dato:"+yy_.yytext);  return 30; 
break;
case 42: console.log("inicio array:"+yy_.yytext);  return 37; 
break;
case 43: console.log("accion array:"+yy_.yytext);  return 'tk_push'; 
break;
case 44: console.log("accion array:"+yy_.yytext);  return 'tk_pop'; 
break;
case 45: console.log("accion array:"+yy_.yytext);  return 'tk_lenght'; 
break;
case 46: console.log("declaracion:"+yy_.yytext);  return 12; 
break;
case 47: console.log("declaracion:"+yy_.yytext);  return 19; 
break;
case 48: console.log("boolean:"+yy_.yytext);  return 49; 
break;
case 49: console.log("boolean:"+yy_.yytext);  return 49; 
break;
case 50: console.log("sentencias:"+yy_.yytext);  return 69; 
break;
case 51: console.log("sentencias:"+yy_.yytext);  return 71; 
break;
case 52: console.log("sentencias:"+yy_.yytext);  return 72; 
break;
case 53: console.log("sentencias:"+yy_.yytext);  return 76; 
break;
case 54: console.log("sentencias:"+yy_.yytext);  return 77; 
break;
case 55: console.log("sentencias:"+yy_.yytext);  return 78; 
break;
case 56: console.log("sentencias:"+yy_.yytext);  return 79; 
break;
case 57: console.log("arimetica:"+yy_.yytext); return 60; 
break;
case 58: console.log("arimetica:"+yy_.yytext); return 42; 
break;
case 59: console.log("arimetica:"+yy_.yytext); return 43; 
break;
case 60: console.log("arimetica:"+yy_.yytext); return 56; 
break;
case 61: console.log("arimetica:"+yy_.yytext); return 57; 
break;
case 62: console.log("arimetica:"+yy_.yytext); return 58; 
break;
case 63: console.log("arimetica:"+yy_.yytext); return 59; 
break;
case 64: console.log("arimetica:"+yy_.yytext); return 61; 
break;
case 65: console.log("relacional:"+yy_.yytext); return 52; 
break;
case 66: console.log("relacional:"+yy_.yytext); return 53; 
break;
case 67: console.log("relacional:"+yy_.yytext); return 54; 
break;
case 68: console.log("relacional:"+yy_.yytext); return 55; 
break;
case 69: console.log("relacional:"+yy_.yytext); return 39; 
break;
case 70: console.log("relacional:"+yy_.yytext); return 38; 
break;
case 71: console.log("Logica:"+yy_.yytext); return 46; 
break;
case 72: console.log("Logica:"+yy_.yytext); return 47; 
break;
case 73: console.log("Logica:"+yy_.yytext); return 48; 
break;
case 74: console.log("ternario:"+yy_.yytext); return 45; 
break;
case 75: console.log("simbolo:"+yy_.yytext); return 35; 
break;
case 76: console.log("simbolo:"+yy_.yytext); return 36; 
break;
case 77: console.log("simbolo:"+yy_.yytext); return 14; 
break;
case 78: console.log("simbolo:"+yy_.yytext); return 16; 
break;
case 79: console.log("simbolo:"+yy_.yytext); return 18; 
break;
case 80: console.log("simbolo:"+yy_.yytext); return 31; 
break;
case 81: console.log("simbolo:"+yy_.yytext); return 33; 
break;
case 82: console.log("simbolo:"+yy_.yytext); return 41; 
break;
case 83: console.log("simbolo:"+yy_.yytext); return 62; 
break;
case 84: console.log("simbolo:"+yy_.yytext); return 63; 
break;
case 85: console.log("numero decimal:"+yy_.yytext);  return 66; 
break;
case 86: console.log("numero entero:"+yy_.yytext);  return 65; 
break;
case 87:  console.log("id:"+yy_.yytext); return 13; 
break;
case 88: /*se ignoran*/ 
break;
case 89:  return 5;  
break;
case 90:  console.log("error:"+yy_.yytext); 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:["])/,/^(?:["])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:['])/,/^(?:['])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:[`])/,/^(?:[`])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:\\")/,/^(?:\\\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Lenght\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[[a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*|["_"]+[0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"ttstring":{"rules":[25,26,27,28,29,30,31],"inclusive":false},"tstring2":{"rules":[17,18,19,20,21,22,23],"inclusive":false},"tstring":{"rules":[9,10,11,12,13,14,15],"inclusive":false},"comentariomulti":{"rules":[5,6,7],"inclusive":false},"comentarios":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,16,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}