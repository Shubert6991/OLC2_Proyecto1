/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,14],$V2=[1,12],$V3=[1,22],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[5,13,14,20,32,72,75,81,82,83,85],$Vb=[5,13,14,20,32,35,44,51,52,60,65,67,68,72,75,79,80,81,82,83,85,88,89,90],$Vc=[1,33],$Vd=[1,36],$Ve=[1,34],$Vf=[1,35],$Vg=[1,37],$Vh=[1,42],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,59],$Vm=[1,56],$Vn=[1,57],$Vo=[1,67],$Vp=[1,60],$Vq=[1,61],$Vr=[1,65],$Vs=[1,64],$Vt=[1,66],$Vu=[1,68],$Vv=[1,74],$Vw=[1,88],$Vx=[1,89],$Vy=[1,90],$Vz=[1,104],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,105],$VF=[19,38,43],$VG=[2,34],$VH=[1,115],$VI=[1,116],$VJ=[2,80],$VK=[15,19,38,43,48,49,50,66],$VL=[1,124],$VM=[1,125],$VN=[1,126],$VO=[1,127],$VP=[1,128],$VQ=[1,129],$VR=[15,19,38,40,41,43,48,49,50,55,56,57,58,59,60,61,62,63,64,66],$VS=[5,13,14,20,32,35,72,74,75,79,80,81,82,83,85,88,89,90],$VT=[13,14,20,32,35,72,75,79,80,81,82,83,85,88,89,90],$VU=[15,17,19],$VV=[2,24],$VW=[2,25],$VX=[2,26],$VY=[2,27],$VZ=[2,28],$V_=[38,43],$V$=[15,19,38,40,41,43,48,49,50,55,56,57,58,59,60,66],$V01=[15,19,38,40,41,43,48,49,50,55,56,57,58,59,60,61,62,64,66],$V11=[5,13,14,20,32,35,72,75,79,80,81,82,83,85,88,89,90],$V21=[14,35],$V31=[14,23,24,25,26,35,39],$V41=[35,79,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"I":4,"EOF":5,"DECLARACION":6,"ASIGNACION":7,"IF":8,"SWITCH":9,"WHILE":10,"DOWHILE":11,"FOR":12,"tk_let":13,"tk_id":14,"tk_dospuntos":15,"TIPOV2":16,"tk_igual":17,"VALOR":18,"tk_puntoycoma":19,"tk_const":20,"TYPES":21,"TIPOV":22,"tk_string":23,"tk_number":24,"tk_boolean":25,"tk_void":26,"ARRAY":27,"ASIGTYPE":28,"VARRAY":29,"T":30,"VALARRAY":31,"tk_type":32,"tk_llavea":33,"LTYPE":34,"tk_llavec":35,"LASIGTYPE":36,"tk_llaveca":37,"tk_llavecc":38,"tk_array":39,"tk_menor":40,"tk_mayor":41,"LVALARRAY":42,"tk_coma":43,"tk_t_entero":44,"tk_inc":45,"tk_dec":46,"L":47,"tk_ternario":48,"tk_and":49,"tk_or":50,"tk_not":51,"tk_t_boolean":52,"R":53,"A":54,"tk_mayorigual":55,"tk_menorigual":56,"tk_igualdad":57,"tk_diferente":58,"tk_suma":59,"tk_resta":60,"tk_mult":61,"tk_div":62,"tk_exp":63,"tk_mod":64,"tk_pabierto":65,"tk_pcerrado":66,"tk_t_string":67,"tk_t_decimal":68,"BSENTENCIAS":69,"SENTENCIAS":70,"ST":71,"tk_if":72,"ELSE":73,"tk_else":74,"tk_switch":75,"BSWITCH":76,"CASE":77,"DEFAULT":78,"tk_case":79,"tk_default":80,"tk_while":81,"tk_do":82,"tk_for":83,"tk_in":84,"tk":85,"for":86,"tk_of":87,"tk_break":88,"tk_continue":89,"tk_return":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"tk_let",14:"tk_id",15:"tk_dospuntos",17:"tk_igual",19:"tk_puntoycoma",20:"tk_const",23:"tk_string",24:"tk_number",25:"tk_boolean",26:"tk_void",32:"tk_type",33:"tk_llavea",35:"tk_llavec",37:"tk_llaveca",38:"tk_llavecc",39:"tk_array",40:"tk_menor",41:"tk_mayor",43:"tk_coma",44:"tk_t_entero",45:"tk_inc",46:"tk_dec",48:"tk_ternario",49:"tk_and",50:"tk_or",51:"tk_not",52:"tk_t_boolean",55:"tk_mayorigual",56:"tk_menorigual",57:"tk_igualdad",58:"tk_diferente",59:"tk_suma",60:"tk_resta",61:"tk_mult",62:"tk_div",63:"tk_exp",64:"tk_mod",65:"tk_pabierto",66:"tk_pcerrado",67:"tk_t_string",68:"tk_t_decimal",72:"tk_if",74:"tk_else",75:"tk_switch",79:"tk_case",80:"tk_default",81:"tk_while",82:"tk_do",83:"tk_for",84:"tk_in",85:"tk",86:"for",87:"tk_of",88:"tk_break",89:"tk_continue",90:"tk_return"},
productions_: [0,[3,2],[3,1],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[6,7],[6,7],[6,5],[6,5],[6,5],[6,3],[6,1],[22,1],[22,1],[22,1],[22,1],[22,1],[16,1],[16,1],[18,1],[18,1],[18,1],[18,1],[21,6],[34,5],[34,4],[28,3],[36,5],[36,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[29,3],[42,3],[42,1],[31,4],[7,4],[7,3],[7,3],[7,4],[30,5],[30,1],[47,3],[47,3],[47,2],[47,1],[47,1],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,2],[54,1],[54,1],[54,1],[54,1],[69,3],[69,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[8,6],[8,5],[73,2],[73,2],[9,5],[76,4],[76,3],[76,2],[77,5],[77,5],[77,4],[77,4],[77,4],[77,3],[78,3],[78,3],[78,2],[10,5],[11,6],[12,8],[12,8],[12,7],[12,8],[12,8],[12,8],[71,2],[71,2],[71,2],[71,3],[71,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:$V0,14:$V1,20:$V2,21:13,31:15,32:$V3,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9},{1:[3]},{5:[1,23],6:24,7:25,8:26,9:27,10:28,11:29,12:30,13:$V0,14:$V1,20:$V2,21:13,31:15,32:$V3,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9},{1:[2,2]},o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),{14:[1,31]},{14:[1,32]},o($Vb,[2,23]),{17:$Vc,37:$Vd,45:$Ve,46:$Vf},{17:$Vg},{65:[1,38]},{65:[1,39]},{65:[1,40]},{33:$Vh,69:41},{65:[1,43]},{86:[1,44]},{14:[1,45]},{1:[2,1]},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{15:$Vi,17:$Vj,19:$Vk},{15:[1,49],17:[1,50]},{14:$Vl,18:51,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{19:[1,69]},{19:[1,70]},{44:[1,71]},{14:$Vl,18:72,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:73,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:75,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:76,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{81:[1,77]},{6:80,7:81,8:82,9:83,10:84,11:85,12:86,13:$V0,14:$V1,20:$V2,21:13,31:15,32:$V3,35:[1,79],70:78,71:87,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy},{6:91,7:92,13:[1,94],14:[1,93],20:$V2,21:13,31:15,32:$V3},{65:[1,95]},{33:[1,96]},{14:$Vz,16:97,22:98,23:$VA,24:$VB,25:$VC,26:$VD,27:99,39:$VE},{14:$Vl,18:106,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($Vb,[2,22]),{14:$Vz,16:107,22:98,23:$VA,24:$VB,25:$VC,26:$VD,27:99,39:$VE},{14:$Vl,18:108,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{19:[1,109]},o($VF,[2,31]),o($VF,[2,32]),o($VF,[2,33]),o($VF,$VG),{14:[1,111],36:110},{14:$Vl,18:113,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,42:112,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($VF,[2,56],{48:[1,114],49:$VH,50:$VI}),o([19,38,40,41,43,48,49,50,55,56,57,58,59,60,61,62,63,64],$VJ,{37:$Vd}),{14:$Vv,44:$Vo,47:117,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,68],{40:[1,119],41:[1,118],55:[1,120],56:[1,121],57:[1,122],58:[1,123],59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),{14:$Vv,44:$Vo,54:130,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:131,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($Vb,[2,52]),o($Vb,[2,53]),{38:[1,132]},{19:[1,133]},{49:$VH,50:$VI,66:[1,134]},o($VR,$VJ),{49:$VH,50:$VI,66:[1,135]},{49:$VH,50:$VI,66:[1,136]},{65:[1,137]},{6:139,7:140,8:141,9:142,10:143,11:144,12:145,13:$V0,14:$V1,20:$V2,21:13,31:15,32:$V3,35:[1,138],71:146,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy},o($VS,[2,82]),o($VT,[2,91]),o($VT,[2,92]),o($VT,[2,93]),o($VT,[2,94]),o($VT,[2,95]),o($VT,[2,96]),o($VT,[2,97]),o($VT,[2,98]),{19:[1,147]},{19:[1,148]},{7:151,14:[1,153],18:150,19:[1,149],28:52,29:53,30:54,31:152,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:154,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:155,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{17:$Vc,37:$Vd,45:$Ve,46:$Vf,84:[1,156]},{14:[1,157]},{14:[1,158]},{14:$Vz,16:160,22:98,23:$VA,24:$VB,25:$VC,26:$VD,27:99,34:159,39:$VE},{17:[1,161],19:[1,162]},o($VU,[2,29]),o($VU,[2,30]),o($VU,$VV,{37:[1,163]}),o($VU,$VW,{37:[1,164]}),o($VU,$VX,{37:[1,165]}),o($VU,$VY,{38:[1,166]}),o($VU,$VZ,{38:[1,167]}),{40:[1,168]},{19:[1,169]},{17:[1,170]},{19:[1,171]},o($Vb,[2,51]),{14:[1,173],35:[1,172]},{15:[1,174]},{38:[1,175],43:[1,176]},o($V_,[2,49]),{14:$Vv,44:$Vo,47:177,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:178,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:179,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($VK,[2,59]),{14:$Vv,44:$Vo,54:180,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:181,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:182,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:183,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:184,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:185,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:186,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:187,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:188,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:189,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:190,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,54:191,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,66:[1,192]},o($V$,[2,76],{61:$VN,62:$VO,63:$VP,64:$VQ}),o([17,19,38,43],[2,50]),o($Vb,[2,54]),{33:$Vh,69:193},{33:[1,195],76:194},{33:$Vh,69:196},{14:$Vv,44:$Vo,47:197,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($VS,[2,81]),o($VT,[2,83]),o($VT,[2,84]),o($VT,[2,85]),o($VT,[2,86]),o($VT,[2,87]),o($VT,[2,88]),o($VT,[2,89]),o($VT,[2,90]),o($VT,[2,124]),o($VT,[2,125]),o($VT,[2,126]),{19:[1,198]},o($VT,[2,128]),{17:$Vg,19:$VG},o([19,40,41,48,49,50,55,56,57,58,59,60,61,62,63,64],$VJ,{17:$Vc,37:$Vd,45:$Ve,46:$Vf}),{19:[1,199],49:$VH,50:$VI},{19:[1,200],49:$VH,50:$VI},{14:[1,201]},{15:$Vi,17:$Vj,19:$Vk,84:[1,202],87:[1,203]},{87:[1,204]},{14:$Vz,16:206,22:98,23:$VA,24:$VB,25:$VC,26:$VD,27:99,35:[1,205],39:$VE},{15:[1,207]},{14:$Vl,18:208,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($Vb,[2,21]),{38:[1,209]},{38:[1,210]},{38:[1,211]},{38:[1,212]},{38:[1,213]},{14:[1,219],22:214,23:[1,215],24:[1,216],25:[1,217],26:[1,218]},o($Vb,[2,19]),{14:$Vl,18:220,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($Vb,[2,20]),o($VF,[2,38]),{15:[1,221]},{14:$Vl,18:222,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($VF,[2,47]),{14:$Vl,18:223,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{15:[1,224],49:$VH,50:$VI},o($VK,[2,57]),o([15,19,38,43,48,50,66],[2,58],{49:$VH}),o($VK,[2,62],{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VK,[2,63],{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VK,[2,64],{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VK,[2,65],{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VK,[2,66],{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VK,[2,67],{59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($V$,[2,69],{61:$VN,62:$VO,63:$VP,64:$VQ}),o($V$,[2,70],{61:$VN,62:$VO,63:$VP,64:$VQ}),o($V01,[2,71],{63:$VP}),o($V01,[2,72],{63:$VP}),o($VR,[2,73]),o($V01,[2,74],{63:$VP}),o($VR,[2,75]),o($V11,[2,100],{73:225,74:[1,226]}),o($V11,[2,103]),{35:[1,228],77:227,79:[1,229]},o($V11,[2,116]),{49:$VH,50:$VI,66:[1,230]},o($VT,[2,127]),{14:$Vv,44:$Vo,47:231,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{14:$Vv,44:$Vo,47:232,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{66:[1,233]},{14:[1,234]},{14:[1,235]},{14:[1,236]},{19:[1,237]},{15:[1,238]},{14:[1,239]},{19:[1,240]},o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),{41:[1,241]},{41:$VV},{41:$VW},{41:$VX},{41:$VY},{41:$VZ},{19:[1,242]},{14:$Vl,18:243,28:52,29:53,30:54,31:55,33:$Vm,37:$Vn,44:$Vo,47:58,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{19:[1,244]},o($V_,[2,48]),{14:$Vv,44:$Vo,47:245,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($V11,[2,99]),{8:247,33:$Vh,69:246,72:$V4},{35:[1,249],78:248,79:[1,250],80:[1,251]},o($V11,[2,106]),{14:$Vv,44:$Vo,47:252,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},o($V11,[2,117]),{49:$VH,50:$VI,66:[1,253]},{49:$VH,50:$VI,66:[1,254]},{33:$Vh,69:255},{66:[1,256]},{66:[1,257]},{66:[1,258]},o($Vb,[2,35]),{14:[1,259]},{19:[1,260]},o($Vb,[2,17]),o($VU,[2,46]),o($Vb,[2,18]),{19:[1,261]},o($V21,[2,40]),o($VF,[2,55],{49:$VH,50:$VI}),o($V11,[2,101]),o($V11,[2,102]),{35:[1,262]},o($V11,[2,105]),{14:$Vv,44:$Vo,47:263,51:$Vp,52:$Vq,53:62,54:63,60:$Vr,65:$Vs,67:$Vt,68:$Vu},{15:[1,264]},{15:[1,265],49:$VH,50:$VI},{33:$Vh,69:266},{33:$Vh,69:267},o($V11,[2,120]),{33:$Vh,69:268},{33:$Vh,69:269},{33:$Vh,69:270},{19:[1,271]},o($V31,[2,37]),o($V21,[2,39]),o($V11,[2,104]),{15:[1,272],49:$VH,50:$VI},{6:80,7:81,8:82,9:83,10:84,11:85,12:86,13:$V0,14:$V1,20:$V2,21:13,31:15,32:$V3,33:$Vh,35:[2,115],69:274,70:273,71:87,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy},o($V41,[2,112],{21:13,31:15,6:80,7:81,8:82,9:83,10:84,11:85,12:86,71:87,70:275,69:276,13:$V0,14:$V1,20:$V2,32:$V3,33:$Vh,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy}),o($V11,[2,118]),o($V11,[2,119]),o($V11,[2,121]),o($V11,[2,123]),o($V11,[2,122]),o($V31,[2,36]),o($V41,[2,109],{21:13,31:15,6:80,7:81,8:82,9:83,10:84,11:85,12:86,71:87,70:277,69:278,13:$V0,14:$V1,20:$V2,32:$V3,33:$Vh,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy}),{6:139,7:140,8:141,9:142,10:143,11:144,12:145,13:$V0,14:$V1,20:$V2,21:13,31:15,32:$V3,35:[2,113],71:146,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy},{35:[2,114]},o($V41,[2,110],{21:13,31:15,6:139,7:140,8:141,9:142,10:143,11:144,12:145,71:146,13:$V0,14:$V1,20:$V2,32:$V3,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy}),o($V41,[2,111]),o($V41,[2,107],{21:13,31:15,6:139,7:140,8:141,9:142,10:143,11:144,12:145,71:146,13:$V0,14:$V1,20:$V2,32:$V3,72:$V4,75:$V5,81:$V6,82:$V7,83:$V8,85:$V9,88:$Vw,89:$Vx,90:$Vy}),o($V41,[2,108])],
defaultActions: {3:[2,2],23:[2,1],215:[2,24],216:[2,25],217:[2,26],218:[2,27],219:[2,28],274:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var valcadena = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("comentarios"); 
break;
case 1: this.popState(); 
break;
case 2: 
break;
case 3: this.popState(); return 5; 
break;
case 4: this.begin("comentariomulti"); 
break;
case 5: this.popState(); 
break;
case 6:  
break;
case 7:  
break;
case 8: this.begin("tstring"); 
break;
case 9: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 67;
                                
break;
case 10: valcadena +='\n'; 
break;
case 11: valcadena +='\t'; 
break;
case 12: valcadena +='\\'; 
break;
case 13: valcadena +='\r'; 
break;
case 14: valcadena +='\"'; 
break;
case 15: valcadena += yy_.yytext; 
break;
case 16: this.begin("tstring2"); 
break;
case 17: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 67;
                                
break;
case 18: valcadena +='\n'; 
break;
case 19: valcadena +='\t'; 
break;
case 20: valcadena +='\\'; 
break;
case 21: valcadena +='\r'; 
break;
case 22: valcadena +='\"'; 
break;
case 23: valcadena += yy_.yytext; 
break;
case 24: this.begin("ttstring"); 
break;
case 25: this.popState(); 
                                   console.log("cadena: "+valcadena); 
                                   yy_.yytext=valcadena; valcadena=""; 
                                   return 67;
                                
break;
case 26: valcadena +='\n'; 
break;
case 27: valcadena +='\t'; 
break;
case 28: valcadena +='\\'; 
break;
case 29: valcadena +='\r'; 
break;
case 30: valcadena +='\"'; 
break;
case 31: valcadena += yy_.yytext; 
break;
case 32: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_comilladoble'; 
break;
case 33: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_barrainvertida'; 
break;
case 34: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_salto'; 
break;
case 35: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_retorno'; 
break;
case 36: console.log("secuencia de escape:"+yy_.yytext);  return 'tk_tab'; 
break;
case 37: console.log("tipo de dato:"+yy_.yytext);  return 23; 
break;
case 38: console.log("tipo de dato:"+yy_.yytext);  return 24; 
break;
case 39: console.log("tipo de dato:"+yy_.yytext);  return 25; 
break;
case 40: console.log("tipo de dato:"+yy_.yytext);  return 26; 
break;
case 41: console.log("tipo de dato:"+yy_.yytext);  return 32; 
break;
case 42: console.log("inicio array:"+yy_.yytext);  return 39; 
break;
case 43: console.log("accion array:"+yy_.yytext);  return 'tk_push'; 
break;
case 44: console.log("accion array:"+yy_.yytext);  return 'tk_pop'; 
break;
case 45: console.log("accion array:"+yy_.yytext);  return 'tk_lenght'; 
break;
case 46: console.log("declaracion:"+yy_.yytext);  return 13; 
break;
case 47: console.log("declaracion:"+yy_.yytext);  return 20; 
break;
case 48: console.log("boolean:"+yy_.yytext);  return 52; 
break;
case 49: console.log("boolean:"+yy_.yytext);  return 52; 
break;
case 50: console.log("sentencias:"+yy_.yytext);  return 72; 
break;
case 51: console.log("sentencias:"+yy_.yytext);  return 74; 
break;
case 52: console.log("sentencias:"+yy_.yytext);  return 75; 
break;
case 53: console.log("sentencias:"+yy_.yytext);  return 79; 
break;
case 54: console.log("sentencias:"+yy_.yytext);  return 80; 
break;
case 55: console.log("sentencias:"+yy_.yytext);  return 81; 
break;
case 56: console.log("sentencias:"+yy_.yytext);  return 82; 
break;
case 57: console.log("sentencias:"+yy_.yytext);  return 83; 
break;
case 58: console.log("sentencias:"+yy_.yytext);  return 84; 
break;
case 59: console.log("sentencias:"+yy_.yytext);  return 87; 
break;
case 60: console.log("transferencia:"+yy_.yytext);  return 88; 
break;
case 61: console.log("transferencia:"+yy_.yytext);  return 89; 
break;
case 62: console.log("transferencia:"+yy_.yytext);  return 90; 
break;
case 63: console.log("arimetica:"+yy_.yytext); return 63; 
break;
case 64: console.log("arimetica:"+yy_.yytext); return 45; 
break;
case 65: console.log("arimetica:"+yy_.yytext); return 46; 
break;
case 66: console.log("arimetica:"+yy_.yytext); return 59; 
break;
case 67: console.log("arimetica:"+yy_.yytext); return 60; 
break;
case 68: console.log("arimetica:"+yy_.yytext); return 61; 
break;
case 69: console.log("arimetica:"+yy_.yytext); return 62; 
break;
case 70: console.log("arimetica:"+yy_.yytext); return 64; 
break;
case 71: console.log("relacional:"+yy_.yytext); return 55; 
break;
case 72: console.log("relacional:"+yy_.yytext); return 56; 
break;
case 73: console.log("relacional:"+yy_.yytext); return 57; 
break;
case 74: console.log("relacional:"+yy_.yytext); return 58; 
break;
case 75: console.log("relacional:"+yy_.yytext); return 41; 
break;
case 76: console.log("relacional:"+yy_.yytext); return 40; 
break;
case 77: console.log("Logica:"+yy_.yytext); return 49; 
break;
case 78: console.log("Logica:"+yy_.yytext); return 50; 
break;
case 79: console.log("Logica:"+yy_.yytext); return 51; 
break;
case 80: console.log("ternario:"+yy_.yytext); return 48; 
break;
case 81: console.log("simbolo:"+yy_.yytext); return 37; 
break;
case 82: console.log("simbolo:"+yy_.yytext); return 38; 
break;
case 83: console.log("simbolo:"+yy_.yytext); return 15; 
break;
case 84: console.log("simbolo:"+yy_.yytext); return 17; 
break;
case 85: console.log("simbolo:"+yy_.yytext); return 19; 
break;
case 86: console.log("simbolo:"+yy_.yytext); return 33; 
break;
case 87: console.log("simbolo:"+yy_.yytext); return 35; 
break;
case 88: console.log("simbolo:"+yy_.yytext); return 43; 
break;
case 89: console.log("simbolo:"+yy_.yytext); return 65; 
break;
case 90: console.log("simbolo:"+yy_.yytext); return 66; 
break;
case 91: console.log("numero decimal:"+yy_.yytext);  return 68; 
break;
case 92: console.log("numero entero:"+yy_.yytext);  return 44; 
break;
case 93:  console.log("id:"+yy_.yytext); return 14; 
break;
case 94: /*se ignoran*/ 
break;
case 95:  return 5;  
break;
case 96:  console.log("error:"+yy_.yytext); 
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[\n])/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:[ \t\r\n\f])/,/^(?:["])/,/^(?:["])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:['])/,/^(?:['])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:[`])/,/^(?:[`])/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\r)/,/^(?:\\")/,/^(?:.)/,/^(?:\\")/,/^(?:\\\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Lenght\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:=)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[[a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*|["_"]+[0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]["_"0-9a-zA-ZñÑáéíóúÁÉÍÓÚ]*)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"ttstring":{"rules":[25,26,27,28,29,30,31],"inclusive":false},"tstring2":{"rules":[17,18,19,20,21,22,23],"inclusive":false},"tstring":{"rules":[9,10,11,12,13,14,15],"inclusive":false},"comentariomulti":{"rules":[5,6,7],"inclusive":false},"comentarios":{"rules":[1,2,3],"inclusive":false},"INITIAL":{"rules":[0,4,8,16,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}